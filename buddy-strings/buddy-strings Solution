class   Solution   { 
 public : 
      bool   buddyStrings ( string s ,  string goal )   { 
         
          //n2 pair  
          //-> 26* 25 combinations 
          if ( s . length ( ) != goal . length ( ) ) 
              return   false ; 
          int  pos0 = - 1 ; 
          int  pos1 = - 1 ; 
          int  fg = 0 ; 
         vector < int >   v ( 26 , 0 ) ; 
          for ( int  i = 0 ; i < s . size ( ) ; i ++ ) 
          { 
              if ( s [ i ] != goal [ i ] ) 
              { 
                  if ( pos0 == - 1 ) 
                     pos0 = i ; 
                  else   if ( pos1 == - 1 ) 
                  { 
                      if ( s [ pos0 ] == goal [ i ]   &&  s [ i ] == goal [ pos0 ] ) 
                      { 
                         pos1 = i ; 
 
                      } 
                      else 
                          return   false ; 
                     
                  } 
                  else 
                      return   false ; 
              } 
 
             v [ s [ i ] - 'a' ] ++ ; 
 
              if ( v [ s [ i ] - 'a' ] >= 2 ) 
                 fg = 1 ; 
          } 
          if ( pos0 != - 1   &&  pos1 != - 1 ) 
              return   true ; 
          if ( fg == 1   &&  pos0 == - 1   &&  pos1 == - 1 ) 
              return   true ; 
          return   false ; 
 
         
      } 
 } ;