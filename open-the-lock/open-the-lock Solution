class   Solution   { 
 public : 
      int   openLock ( vector < string > &  deadends ,  string target )   { 
         
 
          //like word search 
 
          //bfs 
          int  ans = 0 ; 
         queue < string >  q ; 
         q . push ( "0000" ) ; 
 
         unordered_set < string >   de ( deadends . begin ( ) , deadends . end ( ) ) ; 
 
          if ( de . find ( "0000" ) != de . end ( )   ||  de . find ( target ) != de . end ( ) ) 
              return   - 1 ; 
 
         unordered_set < string >  st ; 
 
          while ( ! q . empty ( ) ) 
          {    
              int  sz = q . size ( ) ; 
 
              while ( sz -- ) 
              { 
                    
             string tmp = q . front ( ) ; 
 
              if ( tmp == target ) 
                  return  ans ; 
             q . pop ( ) ; 
              // cout<<tmp<<" "<<"-"<<endl; 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  char  zz = tmp [ i ] ; 
                  int  z = tmp [ i ] - '0' ; 
    
                 tmp [ i ] =   char ( ( ( z + 1 ) % 10   + 10 ) % 10 + '0' ) ; 
 
                  if (  de . find ( tmp ) == de . end ( )   &&   st . find ( tmp ) == st . end ( ) ) { 
                     st . insert ( tmp ) ; 
                     q . push ( tmp ) ; 
                      } 
                  // cout<<tmp<<endl; 
                 tmp [ i ] = char ( ( ( z - 1 ) % 10   + 10 ) % 10 + '0' ) ; 
                  if ( de . find ( tmp ) == de . end ( )   &&  st . find ( tmp ) == st . end ( ) ) { 
                     st . insert ( tmp ) ; 
                     q . push ( tmp ) ; 
                      } 
                 
                  // cout<<tmp<<endl; 
                 tmp [ i ] = zz ; 
 
 
 
              } 
            
             
              } 
              ans ++ ; 
          } 
          return   - 1 ; 
      } 
 } ;