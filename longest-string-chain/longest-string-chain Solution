class   Solution   { 
 public : 
      static   bool   cmp ( string &  s1 ,  string &  s2 ) { 
      return  s1 . size ( )   <  s2 . size ( ) ; 
 } 
      bool   comp ( string nw , string prev ) 
      {    
          if ( nw . size ( ) != prev . size ( ) + 1 ) 
              return   false ; 
          int  z = nw . size ( ) ; 
          int  i = 0 ; 
          int  j = 0 ; 
 
          //sort(nw.begin(),nw.end()); 
          //sort(prev.begin(),prev.end()); 
          int  ct = 0 ; 
 
          while ( i < nw . size ( )    &&  j < prev . size ( ) ) 
          { 
              if (  nw [ i ] != prev [ j ] ) 
                  { ct ++ ; 
                 
                 i ++ ; 
                  } 
 
                  else   { 
                     i ++ ; 
                     j ++ ; 
                  } 
 
                  if ( j == prev . size ( ) )   return   true ; 
          } 
 
          if ( i == nw . size ( )   &&  j == prev . size ( ) ) 
              return   true ; 
 
          return   false ; 
      } 
 
      int   longestStrChain ( vector < string > &  nums )   { 
 
        int  n = nums . size ( ) ; 
         sort ( nums . begin ( ) , nums . end ( ) , cmp ) ; 
 
         vector < int >   dp ( n , 1 ) ; 
          // vector<int> hash(n,1); 
 
          int   ans = 1 ; 
          // int lstind=0; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              // hash[i]=i; 
              for ( int  j = 0 ; j < i ; j ++ ) 
              { 
                  if ( comp ( nums [ i ] , nums [ j ] ) &&   1 + dp [ j ] > dp [ i ] ) 
                  { 
                     dp [ i ] = 1 + dp [ j ] ; 
                      // hash[i]=j; 
 
 
                      if ( dp [ i ] > ans ) 
                      { 
                         ans = dp [ i ] ; 
                          // lstind=i; 
                      } 
                  } 
 
                 
              } 
          } 
 
          return  ans ; 
 
       
      } 
 } ;