class   Solution   { 
 public : 
 
      bool   cmp ( string &  a , string &  b ) 
      {    
          // cout<<a.size()<<" "<<b.size()<<endl; 
          if ( b . size ( ) + 1   !=  a . size ( ) ) 
              return   false ; 
        
        vector < int >   v ( 26 , 0 ) ; 
 
          int  i = 0 , j = 0 ; 
          while ( i < a . size ( )   &&  j < b . size ( ) ) 
          { 
              if ( a [ i ] == b [ j ] ) 
              { 
                 i ++ ; 
                 j ++ ; 
              } 
              else  
                 i ++ ; 
          } 
 
          return  j == b . size ( ) ; 
      
      } 
 
      int   longestStrChain ( vector < string > &  words )   { 
          int  n = words . size ( ) ; 
         vector < int >   dp ( n , 1 ) ; 
          sort ( words . begin ( ) , words . end ( ) , [ ] ( string &  a , string &  b ) { 
              return  a . size ( ) < b . size ( ) ; 
          } ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             cout << words [ i ] << " " ; 
          } 
          // vector<int> hash(n,0); 
          // iota(hash.begin(),hash.end(),0); //Set hash[i]=i; 
          // int lst=0; 
          int  mx = 1 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < i ; j ++ ) 
              { 
                  if ( cmp ( words [ i ] , words [ j ] )   &&   1 + dp [ j ] > dp [ i ] ) 
                      { 
                         dp [ i ] = 1 + dp [ j ] ; 
                          // hash[i]=j; 
                      } 
                  if ( dp [ i ] > mx ) 
                  { 
                     mx = dp [ i ] ; 
                      // lst=i; 
                  } 
              } 
          } 
          return  mx ; 
      } 
 } ;