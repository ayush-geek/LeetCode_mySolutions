
  class   dsu 
  { 
  public : 
 	vector < int >  rank , parent , size ; 
 	 dsu ( int  n ) { 
 		rank . resize ( n + 1 , 0 ) ; 
 		parent . resize ( n + 1 ) ; 
 		size . resize ( n + 1 , 1 ) ; 
 
 		 for ( int  i = 0 ; i <= n ; i ++ ) 
 			parent [ i ] = i ; 
 	 } 
 
 	 int   findUpar ( int  node ) 
 	 { 
 		 if ( node == parent [ node ] ) 
 			 return  node ; 
 
 		 return  parent [ node ] = findUpar ( parent [ node ] ) ; 
 
 	 } 
 
 	 void   unionByRank ( int  u , int  v ) 
 	 { 	
 		 int  up_u = findUpar ( u ) ; 
 		 int  up_v = findUpar ( v ) ; 
 		 if ( up_u  ==  up_v ) 
 			 return   ; 
 
 		 if ( rank [ up_u ] < rank [ up_v ] ) 
 			parent [ up_u ] = up_v ; 
 		 else   if ( rank [ up_v ] < rank [ up_u ] ) 
 			parent [ up_v ] = up_u ; 
 		 else 
 		 { 
 			parent [ up_v ] = up_u ; 
 			rank [ up_u ] ++ ; 
 		 } 
 
 	 } 
 
 	 void   unionBySize ( int  u , int  v ) 
 	 { 	
 		 int  up_u = findUpar ( u ) ; 
 		 int  up_v = findUpar ( v ) ; 
 		 if ( up_u  ==  up_v ) 
 			 return   ; 
 
 		 if ( size [ up_u ] < size [ up_v ] ) { 
 			parent [ up_u ] = up_v ; 
 			size [ up_v ] += size [ up_u ] ; 
 		 } 
 		
 		 else 
 		 { 
 			parent [ up_v ] = up_u ; 
 			size [ up_u ] += size [ up_v ] ; 
 		 } 
 
 	 } 
 	
 	
  } ; 
 
  class   Solution   { 
  public : 
      int   removeStones ( vector < vector < int >> &  stones )   { 
         
 
 
 
          int  mxr = 0 ; 
          int  mxc = 0 ; 
          for ( auto  ele :  stones ) 
          { 
             mxr = max ( mxr , ele [ 0 ] ) ; 
             mxc = max ( mxc , ele [ 1 ] ) ; 
          } 
 
     dsu  ds ( mxr + mxc + 1 ) ; 
     unordered_map < int , int >  mp ; 
 
 
      for ( auto  ele :  stones ) 
          { 
             int  nr = ele [ 0 ] ; 
             int  nc = ele [ 1 ] + mxr + 1 ; 
 
            ds . unionBySize ( nr , nc ) ; 
            mp [ nr ] = 1 ; 
            mp [ nc ] = 1 ; 
          } 
 
 
      int  ct = 0 ; 
      for ( auto  ele :  mp ) 
      { 
          if ( ds . findUpar ( ele . first ) == ele . first ) 
          { 
             ct ++ ; 
          } 
      } 
       return  stones . size ( ) - ct ; 
 
 
 
 
 
 
 
 
      } 
  } ;