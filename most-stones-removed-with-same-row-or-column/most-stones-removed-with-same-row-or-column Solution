class   DSU { 
      public : 
     vector < int >  parent , size ; 
 
      DSU ( int  n ) 
      { 
         parent . resize ( n + 1 ) ; 
         size . resize ( n + 1 , 1 ) ; 
          iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
      } 
 
      int   findUpar ( int  x ) 
      { 
          if ( parent [ x ] == x ) 
              return  x ; 
         
          return  parent [ x ] = findUpar ( parent [ x ] ) ; 
      } 
 
      void   unionBySize ( int  u , int  v ) 
      { 
          int  pu = findUpar ( u ) ; 
          int  pv = findUpar ( v ) ; 
 
          if ( pu == pv ) 
              return   ; 
         
          if ( size [ pu ] < size [ pv ] ) 
          { 
             size [ pv ] += size [ pu ] ; 
             parent [ pu ] = pv ; 
 
          } 
          else { 
              size [ pu ] += size [ pv ] ; 
             parent [ pv ] = pu ; 
 
          } 
      } 
 } ; 
 
 class   Solution   { 
 public : 
      int   removeStones ( vector < vector < int >> &  stones )   { 
         
          int  mxr = 0 ; 
          int  mxc = 0 ; 
 
          for ( auto &  ele :  stones ) 
          { 
             mxr = max ( mxr , ele [ 0 ] ) ; 
             mxc = max ( mxc , ele [ 1 ] ) ; 
          } 
 
         set < int >  st ; 
         DSU  ds ( mxr + mxc + 1 ) ; 
          int  ct = 0 ; 
          for ( auto &  ele :  stones ) 
          { 
              int  u = ele [ 0 ] ; 
              int  v = ele [ 1 ] + mxr + 1 ; 
 
              int  pu = ds . findUpar ( u ) ; 
              int  pv = ds . findUpar ( v ) ; 
           
              if ( pu != pv ) 
              { 
                 ds . unionBySize ( u , v ) ; 
                 
              } 
             st . insert ( u ) ; 
             st . insert ( v ) ; 
          } 
          for ( int  i = 0 ; i <= mxr + mxc ; i ++ ) 
          {    
              if ( st . find ( i ) != st . end ( )   &&  ds . findUpar ( i ) == i ) 
              { 
                 ct ++ ; 
              } 
 
          } 
          return  stones . size ( ) - ct ; 
      } 
 } ;