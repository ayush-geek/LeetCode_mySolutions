/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 class   Solution   { 
 public : 
 
     ListNode *   reverse ( ListNode *  h ) 
      { 
          if ( h == NULL   ||  h -> next == NULL ) 
              return  h ; 
         
         ListNode *  tmp = reverse ( h -> next ) ; 
         h -> next -> next = h ; 
         h -> next = NULL ; 
          return  tmp ; 
      } 
 
      int   pairSum ( ListNode *  head )   { 
         
      //find middle 
     ListNode *  slow = head ; 
     ListNode *  fast = head ; 
 
      while ( fast != NULL   ) 
      { 
         slow = slow -> next ; 
         fast = fast -> next -> next ; 
      } 
 
     ListNode *  h2 = slow ; 
     h2 = reverse ( h2 ) ; 
     cout << h2 -> val << endl ; 
      int  ans = 0 ; 
      while ( h2 != NULL ) 
      { 
         ans = max ( ans , head -> val + h2 -> val ) ; 
         head = head -> next ; 
         h2 = h2 -> next ; 
 
      } 
      return  ans ; 
         
      } 
 } ;