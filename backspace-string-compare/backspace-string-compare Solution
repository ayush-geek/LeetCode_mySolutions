class   Solution   { 
 public : 
      bool   backspaceCompare ( string s ,  string t )   { 
         
         
          int  i = s . size ( ) - 1 ; 
          int  j = t . size ( ) - 1 ; 
         
         
 //         while(i>=0 || j>=0) 
 //         { 
             
 //              if(i>=0 && s[i]=='#' ) 
 //             { 
 //                 int ct=0; 
 //                 while(i>=0 && s[i]=='#' ) 
 //                 { i--; 
 //                     ct++;} 
                    
                
 //                 i-=ct; 
 //             } 
             
 //             else if(j>=0 && t[j]=='#' ) 
 //             { 
 //                 int ct=0; 
 //                 while(j>=0 && t[j]=='#'  ) 
 //                 { j--; 
 //                     ct++;} 
                    
                
 //                 j-=ct; 
 //             } 
             
             
 //             else if(i>=0 && j>=0 && s[i]==t[j]) 
 //             { 
 //                 i--; 
 //                 j--; 
 //             } 
             
           
             
 //             else  
 //                 return false; 
             
 //             cout<<i<<j<<endl; 
 //         } 
         
 //         if(i>0 || j>0) 
 //             return false ; 
         
 //         return true; 
         
         stack < char >  s1 , s2 ; 
         
 for ( int  i = 0 ; i < s . size ( ) ; i ++ ) 
      { 
          if ( s [ i ] == '#'   ) 
                   { 
              if ( ! s1 . empty ( ) ) 
                 s1 . pop ( ) ; 
          }  
          else 
             s1 . push ( s [ i ] ) ; 
             
      } 
        
         
          for ( int  i = 0 ; i < t . size ( ) ; i ++ ) 
      { 
          if ( t [ i ] == '#'   ) 
          { 
              if ( ! s2 . empty ( ) ) 
                 s2 . pop ( ) ; 
          }  
         
         
          else 
             s2 . push ( t [ i ] ) ; 
             
      } 
         
         
          while ( ! s1 . empty ( )   &&   ! s2 . empty ( ) ) 
          { 
              if ( s1 . top ( ) != s2 . top ( ) ) 
              { 
                  return   false ; 
              } 
             
             s1 . pop ( ) ; 
             s2 . pop ( ) ; 
          } 
         
          if ( ! s1 . empty ( )   ||   ! s2 . empty ( ) ) 
              return   false ; 
             
          return   true ; 
         
      } 
 } ;