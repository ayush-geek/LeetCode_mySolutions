class   Solution   { 
 public : 
 
      int   solve ( int  i , int  j , string &  s , string &  t , vector < vector < int >> &  dp ) 
      {    
           if ( j < 0 ) 
              return   1 ; 
          if ( i < 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          int  ans = 0 ; 
         if ( s [ i ] == t [ j ] ) 
             ans += solve ( i - 1 , j - 1 , s , t , dp ) ; 
 
    
             ans += solve ( i - 1 , j , s , t , dp ) ;     
         
          return  dp [ i ] [ j ] = ans ; 
      } 
      int   numDistinct ( string s ,  string t )   { 
          int  n = s . size ( ) ; 
          int  m = t . size ( ) ; 
         vector < vector < double >>   dp ( n + 1 , vector < double >   ( m + 1 , 0 ) ) ; 
          // return solve(n-1,m-1,s,t,dp); 
 
          for ( int  i = 0 ; i <= n ; i ++ ) 
             dp [ i ] [ 0 ] = 1 ; 
 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
              for ( int  j = 1 ; j <= m ; j ++ ) 
              {     int  ans = 0 ; 
                  if ( s [ i - 1 ] == t [ j - 1 ] ) 
                     dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] ; 
                 dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; 
              } 
          } 
          return  dp [ n ] [ m ] ; 
      } 
 } ;