/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 class   Solution   { 
 public : 
 
     ListNode *   merge ( ListNode *  h1 , ListNode *  h2 ) 
      {    
         ListNode *  tmp = new   ListNode ( 0 ) ; 
         ListNode *  ans = tmp ; 
          while ( h1 != NULL   &&  h2 != NULL ) 
          { 
              if ( h1 -> val < h2 -> val ) 
                  { 
                     ans -> next = h1 ; 
                     h1 = h1 -> next ; 
                  } 
              else 
              { 
                     ans -> next = h2 ; 
                     h2 = h2 -> next ; 
              } 
             ans = ans -> next ; 
          } 
 
          while ( h1 != NULL ) 
          { 
             ans -> next = h1 ; 
             h1 = h1 -> next ; 
             ans = ans -> next ; 
          } 
 
           while ( h2 != NULL ) 
          { 
             ans -> next = h2 ; 
             h2 = h2 -> next ; 
             ans = ans -> next ; 
          } 
 
          return  tmp -> next ; 
      } 
 
     ListNode *   mergeKLists ( vector < ListNode * > &  lists )   { 
         
          //Merge 2 sorted list 
          //is easy  
 
          //Damn then reduce it to same 
          //k*n 
 
          if ( lists . size ( ) == 0 ) 
              return   NULL ; 
         ListNode *  tmp = lists [ 0 ] ; 
          int  n = lists . size ( ) ; 
         for ( int  i = 0 ; i < n - 1 ; i ++ ) 
         { 
            tmp = merge ( lists [ i ] , lists [ i + 1 ] ) ; 
            lists [ i + 1 ] = tmp ; 
 
         } 
 
         return  tmp ; 
 
        
      } 
 } ;