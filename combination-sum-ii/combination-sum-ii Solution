class   Solution   { 
 public : 
       void   solve ( int  i , vector < int > &  candidates , int &  target , vector < int > &  tmp , set < vector < int >> &  res , int &  cs ) 
      {    
         
          if ( target == cs ) 
          {    
             
                 res . insert ( tmp ) ; 
                  return   ; 
          } 
         
         
         
         
 
          for ( int  j = i ; j < candidates . size ( ) ; j ++ ) 
          {    
              if ( j > i  &&  candidates [ j ] == candidates [ j - 1 ] ) 
                  continue ; 
               if ( cs + candidates [ j ] <= target ) 
              {    
                 cs += candidates [ j ] ; 
                 tmp . push_back ( candidates [ j ] ) ; 
                  solve ( j + 1 , candidates , target , tmp , res , cs ) ; 
                 cs -= candidates [ j ] ; 
                 tmp . pop_back ( ) ; 
              } 
          } 
 
        
       
         
       
      } 
     vector < vector < int >>   combinationSum2 ( vector < int > &  candidates ,   int  target )   { 
         
          sort ( candidates . begin ( ) , candidates . end ( ) ) ; 
         set < vector < int >>  rs ; 
         vector < vector < int >>  res ; 
         vector < int >  tmp ; 
          int  cs = 0 ; 
          solve ( 0 , candidates , target , tmp , rs , cs ) ; 
         
          for ( auto &  ele :  rs ) 
             res . push_back ( ele ) ; 
          return  res ; 
      } 
 } ;