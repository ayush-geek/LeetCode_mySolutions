class   Solution   { 
  public : 
     
  void   solve ( int  ind , vector < int > &  candidates ,   int  target , vector < int > &  lp ,  vector < vector < int >> &  ans ) 
  {    // {   if(i>candidates.size()) 
      //         return ; 
         
              if ( target == 0 ) 
              { 
                 ans . push_back ( lp ) ; 
              } 
             
             
       
         
          for ( int  i = ind ; i < candidates . size ( ) ; i ++ ) 
          { 
              if ( i != ind  &&  candidates [ i ] == candidates [ i - 1 ] ) 
                  continue ; 
              if ( candidates [ i ] <= target ) 
          { 
             lp . push_back ( candidates [ i ] ) ; 
              solve ( i + 1 , candidates , target - candidates [ i ] , lp , ans ) ; 
             lp . pop_back ( ) ; 
          } 
            else 
                break ; 
             
          } 
        
      } 
     
     vector < vector < int >>   combinationSum2 ( vector < int > &  candidates ,   int  target )   { 
     vector < vector < int >>  ans ; 
         
         vector < int >  lp ; 
         
          sort ( candidates . begin ( ) , candidates . end ( ) ) ; 
          solve ( 0 , candidates , target , lp , ans ) ; 
         
         
         
         
          return  ans ; 
      } 
  } ;