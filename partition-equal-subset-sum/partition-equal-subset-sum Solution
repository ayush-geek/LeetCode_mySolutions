class   Solution   { 
  public : 
     
      int   solve ( int  i , int  j , vector < int > &  nums , vector < vector < int >> &  dp ) 
      { 
          if ( j == 0 ) 
              return   1 ; 
          if ( i < 0 ) 
              return   0 ; 
        
         
         
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
         
          int  ans = 0 ; 
          if ( nums [ i ] <= j ) 
             ans =  ans  || solve ( i - 1 , j - nums [ i ] , nums , dp ) ; 
         ans =  ans  ||   solve ( i - 1 , j , nums , dp ) ; 
         
         
          return  dp [ i ] [ j ] = ans ; 
      } 
     
     
     
     
      bool   canPartition ( vector < int > &  nums )   { 
         
          int  z = accumulate ( nums . begin ( ) , nums . end ( ) , 0 ) ; 
         
         
         
          if ( z % 2 != 0 ) 
              return   false ; 
          int  tgt = z / 2 ; 
         
         
          int  n = nums . size ( ) ; 
         
         
         
         
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( tgt + 1 , 0 ) ) ; 
         
         
         dp [ 0 ] [ 0 ] = 1 ; 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
             dp [ i ] [ 0 ] = 1 ; 
          } 
         
         
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
              for ( int  j = 1 ; j <= tgt ; j ++ ) 
              { 
                   int  ans = 0 ; 
              if ( nums [ i - 1 ] <= j ) 
                 ans =  ans  ||  dp [ i - 1 ] [ j - nums [ i - 1 ] ] ; 
             
             ans =  ans  ||  dp [ i - 1 ] [ j ] ; 
                 
                 dp [ i ] [ j ] = ans ; 
              } 
          } 
         
          return  dp [ n ] [ tgt ] ; 
         
         // return solve(n-1,tgt,nums,dp); 
      } 
     
  } ;