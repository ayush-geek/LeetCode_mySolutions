class   Solution   { 
  public : 
      bool   canPartition ( vector < int > &  nums )   { 
         
          int  n = nums . size ( ) ; 
          int  z = accumulate ( nums . begin ( ) , nums . end ( ) , 0 ) ; 
 
          if ( z % 2 != 0 ) 
              return   false ; 
          int   tgt = z / 2 ; 
 
         vector < vector < int >>   dp ( n , vector < int >   ( tgt + 1 , 0 ) ) ; 
 
          // if(nums[0]<tgt) 
          //     dp[0][nums[0]]=1; 
         dp [ 0 ] [ 0 ] = 1 ; 
          for ( int  i = 1 ; i < n ; i ++ ) 
          {    dp [ i ] [ 0 ] = 1 ; 
              for ( int  j = 1 ; j <= tgt ; j ++ ) 
              { 
                  dp [ i ] [ j ]   =  dp [ i - 1 ] [ j ] ; 
              if   ( j  >=  nums [ i - 1 ] )   { 
                 dp [ i ] [ j ]   =   ( dp [ i ] [ j ]   ||  dp [ i - 1 ] [ j - nums [ i - 1 ] ] ) ; 
              } 
              } 
          } 
 
          if ( dp [ n - 1 ] [ tgt ] ) 
              return   true ; 
          else 
              return   false ; 
 
      } 
  } ;