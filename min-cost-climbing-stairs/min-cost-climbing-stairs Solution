class   Solution   { 
 public : 
      int   solve ( int  i , vector < int > &  cost , vector < int > &  dp ) 
      { 
          if ( i == 0   ||  i == 1 ) 
              { 
                  return   0 ; 
              } 
      
 
          if ( dp [ i ] != - 1 ) 
              return  dp [ i ] ; 
         
          return  dp [ i ] = min ( cost [ i - 1 ] + solve ( i - 1 , cost , dp ) , cost [ i - 2 ] + solve ( i - 2 , cost , dp ) ) ; 
      } 
 
      int   minCostClimbingStairs ( vector < int > &  cost )   { 
      int  n = cost . size ( ) ; 
     vector < int >   dp ( n + 1 , - 1 ) ; 
     dp [ 0 ] = 0 ; 
     dp [ 1 ] = 0 ; 
 
      for ( int  i = 2 ; i <= n ; i ++ ) 
      { 
         dp [ i ] = min ( cost [ i - 1 ] + dp [ i - 1 ] , cost [ i - 2 ] + dp [ i - 2 ] ) ; 
      } 
 
 
      return  dp [ n ] ; 
      } 
 } ;