class   Solution   { 
  public : 
     
     
      int   f ( int  i , vector < int > &  cost , vector < int > &  dp ) 
      { 
         //cout<<i<<endl; 
         
         
          if ( i <= 1 ) 
              return   0 ; 
         
         
         
         
          if ( dp [ i ] != - 1 ) 
              return  dp [ i ] ; 
         
          int  not_take = cost [ i - 1 ] + f ( i - 1 , cost , dp ) ; 
          int  take = cost [ i - 2 ] + f ( i - 2 , cost , dp ) ; 
         
          return  dp [ i ] = min ( take , not_take ) ; 
      } 
     
     
     
      int   minCostClimbingStairs ( vector < int > &  cost )   { 
         
         
          //Recursion take / Not_take 
        
     
          int  n = cost . size ( ) ; 
         vector < int >   dp ( n + 1 , 0 ) ; 
         // return f(n,cost,dp); 
         
           //tRY tO write Tabulation 
         
         
          for ( int  i = 2 ; i <= n ; i ++ ) 
          { 
              int  not_take = cost [ i - 1 ] + dp [ i - 1 ] ; 
          int  take = cost [ i - 2 ] + dp [ i - 2 ] ; 
         
          dp [ i ] = min ( take , not_take ) ; 
          } 
         
          return  dp [ n ] ; 
      } 
  } ;