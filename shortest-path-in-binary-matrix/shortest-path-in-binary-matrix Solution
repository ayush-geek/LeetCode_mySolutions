class   Solution   { 
  public : 
      int   shortestPathBinaryMatrix ( vector < vector < int >> &  grid )   { 
         
 
          //bfs 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
          if ( grid [ 0 ] [ 0 ]   != 0   ||  grid [ n - 1 ] [ m - 1 ] != 0 ) 
              return   - 1 ; 
 
          if ( grid . size ( ) == 1 ) 
              return   1 ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
 
         
         queue < pair < pair < int , int > , int >>  q ; 
 
         q . push ( { { 0 , 0 } , 0 } ) ; 
         vis [ 0 ] [ 0 ] = 1 ; 
          int  ans = INT_MAX ; 
 
          while ( ! q . empty ( ) ) 
          { 
 
              int  r = q . front ( ) . first . first ; 
              int  c = q . front ( ) . first . second ; 
              int  d = q . front ( ) . second ; 
 
             
             q . pop ( ) ; 
 
              for ( int  ii = - 1 ; ii <= + 1 ; ii ++ ) 
              { 
                  for   ( int  jj = - 1 ; jj <= 1 ; jj ++ ) 
                  { 
                      int  nr = r + ii ; 
                      int  nc = c + jj ; 
                     
                      if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&   ! vis [ nr ] [ nc ]   &&  grid [ nr ] [ nc ] == 0 ) 
                          { 
                             q . push ( { { nr , nc } , d + 1 } ) ; 
                             vis [ nr ] [ nc ] = 1 ; 
                         
                               if ( nr == n - 1   &&  nc == m - 1   ) 
                               { 
                                 ans = min ( ans , d + 1 ) ; 
                              } 
                          } 
 
                    
                  } 
              } 
 
 
          } 
 
          if ( ans == INT_MAX ) 
              return   - 1 ; 
          else 
              return  ans + 1   ;    //nodes=path+1 
 
 
      } 
  } ;