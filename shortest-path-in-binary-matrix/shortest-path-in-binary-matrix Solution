class   Solution   { 
 public : 
      int   shortestPathBinaryMatrix ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid . size ( ) ; 
 
         vector < vector < int >>   dis ( n , vector < int >   ( m , 1e9 ) ) ; 
 
 
          //bfs 
     dis [ 0 ] [ 0 ] = 0 ; 
 
     queue < pair < int , int >>  q ; 
 
      if ( grid [ 0 ] [ 0 ] != 1 ) 
         q . push ( { 0 , 0 } ) ; 
 
 
      while ( ! q . empty ( ) ) 
      { 
          auto  nd = q . front ( ) ; 
         q . pop ( ) ; 
          int  r = nd . first ; 
          int  c = nd . second ; 
 
          if ( r == n - 1   &&  c == m - 1 ) 
              return  dis [ r ] [ c ] + 1 ; 
 
          for ( int  i = - 1 ; i <= 1 ; i ++   ) 
          { 
              for ( int  j = - 1 ; j <= 1 ; j ++ ) 
              { 
                  int  nr = r + i ; 
                  int  nc = c + j ; 
 
 
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&  grid [ nr ] [ nc ] == 0 ) 
                  { 
                      if ( 1 + dis [ r ] [ c ] < dis [ nr ] [ nc ] ) 
                      { 
                         dis [ nr ] [ nc ] = 1 + dis [ r ] [ c ] ; 
                         q . push ( { nr , nc } ) ; 
                      } 
                  } 
              } 
          } 
      } 
 
          return   - 1 ; 
      } 
 } ;