class   Solution   { 
 public : 
      int   shortestPathBinaryMatrix ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
 
          //all the vis cells of path are 0 
         queue < pair < pair < int , int > , int >>  q ; 
          if ( grid [ 0 ] [ 0 ] != 0   ||  grid [ n - 1 ] [ m - 1 ] != 0 ) 
              return   - 1 ; 
         q . push ( { { 0 , 0 } , 0 } ) ; 
         vis [ 0 ] [ 0 ] = 1 ; 
 
          while ( ! q . empty ( ) ) 
          { 
              int  r = q . front ( ) . first . first ; 
              int  c = q . front ( ) . first . second ; 
              int  l = q . front ( ) . second ; 
             q . pop ( ) ; 
 
              if ( r == n - 1   &&  c == m - 1 ) 
                  return  l + 1 ; 
              for ( int  dr = - 1 ; dr <= 1 ; dr ++ ) 
              { 
                  for ( int  dc = - 1 ; dc <= 1 ; dc ++ ) 
                  { 
                      int  nr = r + dr ; 
                      int  nc = c + dc ; 
 
                      if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&  grid [ nr ] [ nc ] == 0   &&  vis [ nr ] [ nc ] == 0 ) 
                      { 
                         q . push ( { { nr , nc } , l + 1 } ) ; 
                         vis [ nr ] [ nc ] = 1 ; 
                      } 
 
 
                  } 
              } 
          } 
 
        
              return   - 1 ; 
     
 
      } 
 } ;