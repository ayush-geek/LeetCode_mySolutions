class   Solution   { 
 public : 
 
      bool   solve ( int  i , vector < vector < int >> &  adj , vector < int > &  vis , int  pcol ) 
      { 
          if ( vis [ i ] != 0 ) 
              return   true ; 
 
          int  col = 0 ; 
          if ( pcol == 1 )      //RedColor Node 
             {  
             vis [ i ] = 1 ;   //Red Color 
            col = 2 ;     //Neighbours Color 
             } 
          else { 
             vis [ i ] = 2 ; 
             col = 1 ; 
              } 
 
          for ( int  j = 0 ; j < adj [ i ] . size ( ) ; j ++ ) 
          {    
              if ( vis [ adj [ i ] [ j ] ] == 0 ) 
              { 
                  //Blue Color 
              // cout<<i<<" "<<vis[i]<<" "<<adj[i][j]<<" "<<vis[adj[i][j]]<<endl;  
              solve ( adj [ i ] [ j ] , adj , vis , col ) ;    
 
              } 
              else   if ( vis [ adj [ i ] [ j ] ] == vis [ i ] ) 
                 { 
                
              // cout<<i<<" "<<vis[i]<<" "<<adj[i][j]<<endl;     
                    
                  return   false ; 
                
                 } 
 
          } 
 
          return   true ; 
      } 
 
      bool   possibleBipartition ( int  n ,  vector < vector < int >> &  dislikes )   { 
         
          //Create a Adjacency List 
         vector < vector < int >>   adj ( n + 1 ) ; 
         
          for ( int  i = 0 ; i < dislikes . size ( ) ; i ++ ) 
          { 
             adj [ dislikes [ i ] [ 0 ] ] . push_back ( dislikes [ i ] [ 1 ] ) ; 
             adj [ dislikes [ i ] [ 1 ] ] . push_back ( dislikes [ i ] [ 0 ] ) ; 
 
 
          } 
 
         vector < int >   vis ( n + 1 , 0 ) ; 
 
          int  col = 1 ; 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
         
              if ( vis [ i ] == 0 ) 
               { if ( solve ( i , adj , vis , col ) == false ) 
                  return   false ; 
               } 
            
          } 
 
          return   true ; 
      } 
 } ;