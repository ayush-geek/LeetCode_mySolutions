class   Solution   { 
 public : 
 
 
      int   dfs ( int  i , int  j , int  er , int  ec , vector < vector < int >> &  grid , vector < vector < int >> &  vis , int  len  ) 
      { 
 
           int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
         
          if ( i < 0   ||  i >= n  ||  j < 0   ||  j >= m  ||  grid [ i ] [ j ] == - 1 || vis [ i ] [ j ]    || len < 0 ) 
              return   0 ; 
 
          if ( grid [ i ] [ j ] == 2   &&  len == 1 ) 
              return   1 ; 
          else   if ( grid [ i ] [ j ] == 2 ) 
              return   0 ; 
         vis [ i ] [ j ] = 1 ; 
 
          //len-=1; 
         cout << len << endl ; 
          int  a = dfs ( i - 1 , j , er , ec , grid , vis , len - 1 ) ; 
          int  b = dfs ( i + 1 , j , er , ec , grid , vis , len - 1 ) ; 
 
          int  c = dfs ( i , j - 1 , er , ec , grid , vis , len - 1 ) ; 
          int  d = dfs ( i , j + 1 , er , ec , grid , vis , len - 1 ) ; 
         
         vis [ i ] [ j ] = 0 ; 
 
          return  a + b + c + d ; 
      } 
 
 
 
      int   uniquePathsIII ( vector < vector < int >> &  grid )   { 
         
 
          //Find srt point and end Point 
 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
          int  sr = 0 , sc = 0 ; 
          int  er = 0   , ec = 0 ; 
          int  ct = 0 ; 
         vector < vector < int >>   vis ( n + 1 , vector < int >   ( m + 1 , 0 ) ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == 1 ) 
                  { 
                     sr = i ; 
                     sc = j ; 
 
                          //    break; 
                  } 
                
                 if ( grid [ i ] [ j ] == 0 ) 
                 ct ++ ; 
              } 
          } 
 
          int  len = ct + 2 ; 
 
          return   dfs ( sr , sc , er , ec , grid , vis , len ) ; 
      } 
 } ;