/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
  class   Solution   { 
  public : 
     
     
      void   solve ( TreeNode *  root , string &  res ) 
      { 
          if ( root == NULL ) 
          { 
          
             // res.push_back(')'); 
 
               return   ; 
 
          } 
         
         
        int  z = root -> val ; 
         
         res += to_string ( z ) ; 
         
            //if(root!=NULL) 
               res . push_back ( '(' ) ; 
          solve ( root -> left , res ) ; 
               if ( res . back ( ) == '('   &&  root -> right == NULL ) 
                res . pop_back ( ) ; 
             else 
                 res . push_back ( ')' ) ; 
        
           
        res . push_back ( '(' ) ; 
          solve ( root -> right , res ) ; 
            if ( res . back ( ) == '(' ) 
               res . pop_back ( ) ; 
          else 
             res . push_back ( ')' ) ; 
         
         
         
           // if(root->left==NULL && root->right==NULL) 
           //     res.pop_back(); 
                       
                       
                        } 
     
     
     
     
     string  tree2str ( TreeNode *  root )   { 
         
         
          //Preorder 
         
         string res = "" ; 
         
         
          solve ( root , res ) ; 
         
          return  res ; 
      } 
  } ;