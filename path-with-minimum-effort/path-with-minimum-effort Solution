class   Solution   { 
 public : 
      int   minimumEffortPath ( vector < vector < int >> &  heights )   { 
          int  n = heights . size ( ) ; 
          int  m = heights [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   ht ( n , vector < int >   ( m , 1e9 ) ) ; 
 
         queue < pair < int , int >>  q ; 
         q . push ( { 0 , 0 } ) ; 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
         ht [ 0 ] [ 0 ] = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              auto  nd = q . front ( ) ; 
             q . pop ( ) ; 
              int  r = nd . first ; 
              int  c = nd . second ; 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  int  nr = r + dr [ i ] ; 
                  int  nc = c + dc [ i ] ; 
                
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  ) 
                  {    
                       int  dif = max ( abs ( heights [ nr ] [ nc ] - heights [ r ] [ c ] ) , ht [ r ] [ c ] ) ; 
                      if ( dif < ht [ nr ] [ nc ] ) 
                      { 
                         ht [ nr ] [ nc ] = dif ; 
                         q . push ( { nr , nc } ) ; 
                      } 
                  } 
              } 
          } 
 
          return  ht [ n - 1 ] [ m - 1 ] ; 
      } 
 } ;