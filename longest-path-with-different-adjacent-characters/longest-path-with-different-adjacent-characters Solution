class   Solution   { 
  public : 
 
      int   solve ( int  i , unordered_map < int , vector < int >> &  mp , string &  s , int &  mx ) 
      { 
          int  ans = 1 ; 
      
 
        auto  it = mp [ i ] ; 
          int  tt = 0 ; 
          int  t2 = 0 ; 
              for ( auto  e : it ) 
              { 
             
                  int  tmp = solve ( e , mp , s , mx ) ; 
 
                  if ( s [ e ] != s [ i ] ) 
                  { 
                    
                      if ( tmp > tt ) { 
                          t2 = max ( t2 , tt ) ; 
                         tt = max ( tt , tmp ) ; 
                        
                          } 
                      else  
                         t2 = max ( t2 , tmp ) ; 
                  } 
                
             
              } 
 
     
        
         mx = max ( mx , ans + tt + t2 ) ; 
 
         
            return  tt + 1 ; 
 
 
      } 
 
      int   longestPath ( vector < int > &  parent ,  string s )   { 
         
         unordered_map < int , vector < int >>  mp ;    
          int  rt = 0 ; 
 
          for ( int  i = 0 ; i < parent . size ( ) ; i ++ ) 
          { 
              if ( parent [ i ] == - 1 ) 
              { 
                 rt = i ; 
              } 
              else 
              { 
                 mp [ parent [ i ] ] . push_back ( i ) ; 
              } 
          } 
          int  mx = 0 ; 
          int  z =   solve ( rt , mp , s , mx ) ; 
          return  mx ; 
      } 
  } ;