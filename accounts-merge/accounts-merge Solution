class   DSU { 
      public : 
     vector < int >  parent , size ; 
 
      DSU ( int  n ) 
      { 
         parent . resize ( n + 1 ) ; 
         size . resize ( n + 1 , 1 ) ; 
          iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
      } 
 
      int   findUpar ( int  x ) 
      { 
          if ( parent [ x ] == x ) 
              return  x ; 
         
          return  parent [ x ] = findUpar ( parent [ x ] ) ; 
      } 
 
      void   unionBySize ( int  u , int  v ) 
      { 
          int  pu = findUpar ( u ) ; 
          int  pv = findUpar ( v ) ; 
 
          if ( pu == pv ) 
              return   ; 
         
          if ( size [ pu ] < size [ pv ] ) 
          { 
             size [ pv ] += size [ pu ] ; 
             parent [ pu ] = pv ; 
 
          } 
          else { 
              size [ pu ] += size [ pv ] ; 
             parent [ pv ] = pu ; 
 
          } 
      } 
 } ; 
 
 class   Solution   { 
 public : 
     vector < vector < string >>   accountsMerge ( vector < vector < string >> &  accounts )   { 
         vector < vector < string >>  rs ; 
          int  n = accounts . size ( ) ; 
         DSU  ds ( n ) ; 
 
         unordered_map < int , string >  mp1 ;   
          // unordered_map<int,vector<string>> mp2; 
         unordered_map < string , int >  mp2 ; 
          int  k = 0 ; 
          for ( auto &  ele :  accounts ) 
          {    
             mp1 [ k ] = ele [ 0 ] ; 
             for ( int  i = 1 ; i < ele . size ( ) ; i ++ ) 
             { 
              
                 
                  if ( mp2 . find ( ele [ i ] ) == mp2 . end ( ) ) 
                  { 
                   
                    mp2 [ ele [ i ] ] = k ; 
                 
                 
                  } 
                  else 
                  { 
                     ds . unionBySize ( mp2 [ ele [ i ] ] , k ) ; 
                  } 
                 
             } 
            k ++ ; 
          } 
 
        unordered_map < int , set < string >>  mp ; 
          k = 0 ; 
          for ( auto &  ele :  accounts ) 
          {    
              int  ind = k ; 
             ind = ds . findUpar ( ind ) ; 
 
              set < string >  tmp ; 
         
              if ( ind == k ) 
              { 
                for ( int  i = 1 ; i < ele . size ( ) ; i ++ ) 
                  { 
                     tmp . insert ( ele [ i ] ) ; 
                  } 
              } 
 
              else 
              { 
                  for ( int  i = 1 ; i < ele . size ( ) ; i ++ ) 
                  { 
                      if ( mp2 [ ele [ i ] ] != ind ) 
                         tmp . insert ( ele [ i ] ) ; 
                  } 
 
                 
              } 
 
              for ( auto &  ele :  tmp  ) 
                 mp [ ind ] . insert ( ele ) ; 
 
            
 
             k ++ ; 
          } 
 
          for ( auto   &  ele :  mp ) 
          {    
              int  z = ele . first ; 
             vector < string >  tmp ; 
             tmp . push_back ( mp1 [ z ] ) ; 
              //sort(tmp.begin(),tmp.end()); 
              //tmp.insert(tmp.begin(),mp1[z]); 
 
              for ( auto &  it :  ele . second ) 
                 tmp . push_back ( it ) ; 
             rs . push_back ( tmp ) ; 
          } 
         
          return  rs ; 
      } 
 } ;