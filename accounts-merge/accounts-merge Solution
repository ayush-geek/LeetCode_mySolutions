class   dsu 
  { 
  public : 
 	vector < int >  rank , parent , size ; 
 	 dsu ( int  n ) { 
 		rank . resize ( n + 1 , 0 ) ; 
 		parent . resize ( n + 1 ) ; 
 		size . resize ( n + 1 , 1 ) ; 
 
 		 for ( int  i = 0 ; i <= n ; i ++ ) 
 			parent [ i ] = i ; 
 	 } 
 
 	 int   findUpar ( int  node ) 
 	 { 
 		 if ( node == parent [ node ] ) 
 			 return  node ; 
 
 		 return  parent [ node ] = findUpar ( parent [ node ] ) ; 
 
 	 } 
 
 	 void   unionBySize ( int  u , int  v ) 
 	 { 	
 		 int  up_u = findUpar ( u ) ; 
 		 int  up_v = findUpar ( v ) ; 
 		 if ( up_u  ==  up_v ) 
 			 return   ; 
 
 		 if ( size [ up_u ] < size [ up_v ] ) { 
 			parent [ up_u ] = up_v ; 
 			size [ up_v ] += size [ up_u ] ; 
 		 } 
 		
 		 else 
 		 { 
 			parent [ up_v ] = up_u ; 
 			size [ up_u ] += size [ up_v ] ; 
 		 } 
 
 	 } 
 	
 	
  } ; 
 
  class   Solution   { 
  public : 
     vector < vector < string >>   accountsMerge ( vector < vector < string >> &  accounts )   { 
 
      int  n = accounts . size ( ) ; 
     dsu  ds ( n ) ; 
     unordered_map < string , int >  mp ; 
 
      for ( int  i = 0 ; i < n ; i ++ ) 
      { 
          for ( int  j = 1 ; j < accounts [ i ] . size ( ) ; j ++ ) 
          { 
              if ( mp . find ( accounts [ i ] [ j ] ) == mp . end ( ) ) 
              { 
                 mp [ accounts [ i ] [ j ] ] = i ; 
              } 
              else 
              { 
                 ds . unionBySize (   mp [ accounts [ i ] [ j ] ] , i ) ; 
              } 
 
          } 
      } 
 
     vector < string >  mail [ n ] ; 
      for ( auto  ele :  mp ) 
      { 
          int  z = mp [ ele . first ] ; 
          int  up = ds . findUpar ( z ) ; 
         mp [ ele . first ] = up ; 
 
         mail [ up ] . push_back ( ele . first ) ; 
      } 
 
     vector < vector < string >>  ans ; 
 
      for ( int  i = 0 ; i < n ; i ++ ) 
      { 
          if ( mail [ i ] . size ( ) == 0 ) 
              continue ; 
          sort ( mail [ i ] . begin ( ) , mail [ i ] . end ( ) ) ; 
 
 
         mail [ i ] . insert ( mail [ i ] . begin ( ) , accounts [ i ] [ 0 ] ) ; 
         ans . push_back ( mail [ i ] ) ; 
 
      } 
 
 
      return  ans ; 
 
      } 
  } ;