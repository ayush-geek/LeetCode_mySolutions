class   Solution   { 
  public : 
     
       void   dfs ( int  i  , vector < int > &  vis , vector < vector < int >> &  grid ) { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          if ( i < 0   ||  i >= n  ||  vis [ i ]   ) 
          { 
              return   ; 
          } 
 
         vis [ i ] = 1 ; 
 
         for ( int  j = 0 ; j < n ; j ++ ) 
         { 
             if ( ! vis [ j ]   &&  grid [ i ] [ j ] ) 
             { 
                 dfs ( j , vis , grid ) ; 
             } 
         } 
          // dfs(i-1,j,vis,grid); 
          // dfs(i+1,j,vis,grid); 
          // dfs(i,j-1,vis,grid); 
          // dfs(i,j+1,vis,grid); 
      } 
      int   findCircleNum ( vector < vector < int >> &  grid )   { 
           int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
 
          // vector<vector<int>> vis(n,vector<int> (m,0)); 
         vector < int >   vis ( n , 0 ) ; 
 
 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
            
                  if ( ! vis [ i ] ) { 
                      dfs ( i , vis , grid ) ; 
                     ans ++ ; 
                  } 
             
          } 
 
          return  ans ; 
      } 
  } ;