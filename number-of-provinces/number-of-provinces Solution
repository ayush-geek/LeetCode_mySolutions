class   DSU { 
 public : 
 vector < int >  parent , size ; 
 
 DSU ( int  n ) 
 { 
     size . resize ( n + 1 , 1 ) ; 
     parent . resize ( n + 1 , 0 ) ; 
      iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
 } 
 
 int   findUpar ( int  num ) 
 { 
      if ( parent [ num ] == num ) 
          return  num ; 
      return  parent [ num ] = findUpar ( parent [ num ] ) ; 
 } 
 
 bool   unionBySize ( int  a , int  b ) 
 { 
      int  pa = findUpar ( a ) ; 
      int  pb = findUpar ( b ) ; 
 
      if ( pa == pb )   
          return   false ; 
     
      if ( size [ pa ] <=  size [ pb ] ) 
      { 
         size [ pb ] += size [ pa ] ; 
         parent [ pb ] = pa ; 
      } 
      else 
      { 
         size [ pa ] += size [ pb ] ; 
         parent [ pa ] = pb ; 
      } 
      return   true ; 
 } 
 
 } ; 
 
 class   Solution   { 
 public : 
      int   findCircleNum ( vector < vector < int >> &  isConnected )   { 
         
          int  n = isConnected . size ( ) ; 
         DSU  ds ( n ) ; 
 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < n ; j ++ ) 
              { 
                  if ( isConnected [ i ] [ j ] == 1 ) 
                  { 
                      bool  z = ds . unionBySize ( i , j ) ; 
 
                      if ( z ) 
                         ans ++ ; 
                 
                  } 
              } 
          } 
 
          return  n - ans ; 
      } 
 } ;