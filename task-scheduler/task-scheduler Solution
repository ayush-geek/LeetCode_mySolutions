class   Solution   { 
  public : 
      int   leastInterval ( vector < char > &  tasks ,   int  n )   { 
         
          // proiority_queue<pair<int,int>> pq; 
         queue < pair < int , int >>  q ; 
          int  t = 0 ; 
         unordered_map < char , int >  mp ; 
          //My Map is made 
          for ( int  i = 0 ; i < tasks . size ( ) ; i ++ ) 
             mp [ tasks [ i ] ] ++ ; 
         
         priority_queue < int >  pq ; 
         
          for ( auto  ele :  mp ) 
          { 
             pq . push ( { ele . second } ) ; 
          } 
         
 
          while ( ! pq . empty ( )    ||   ! q . empty ( ) ) 
          {    t += 1 ; 
             
          while ( ! q . empty ( )   &&  q . front ( ) . second == t ) 
          { 
             pq . push ( q . front ( ) . first ) ; 
                 q . pop ( ) ; 
          } 
 
          if ( ! pq . empty ( ) ) 
          { 
              int  z1 = pq . top ( ) ; 
 
             pq . pop ( ) ; 
             z1 -- ; 
              if ( z1 != 0 ) 
              {    
                  //cout<<z1<<" "<<t+n+1<<endl; 
                 q . push ( { z1 , t + n + 1 } ) ; 
              } 
 
          } 
             
          } 
 
          return  t ; 
 
      } 
  } ;