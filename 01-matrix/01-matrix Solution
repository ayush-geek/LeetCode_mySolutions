class   Solution   { 
  public : 
     vector < vector < int >>   updateMatrix ( vector < vector < int >> &  mat )   { 
         
          //a cell 0 will have distance 0 
 
          //bfs  
 
         queue < pair < pair < int , int > , int >>  q ; 
 
          int  n = mat . size ( ) ; 
          int  m = mat [ 0 ] . size ( ) ; 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( mat [ i ] [ j ] == 0 ) 
                      { 
                         q . push ( { { i , j } , 0 } ) ; 
                         vis [ i ] [ j ] = 1 ; 
                      } 
              } 
          } 
 
          while ( ! q . empty ( ) ) 
          { 
              auto  itr = q . front ( ) ; 
              int  r = itr . first . first ; 
              int  c = itr . first . second ; 
              int  d = itr . second ; 
             q . pop ( ) ; 
             mat [ r ] [ c ] = d ; 
 
                  int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
                  int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
 
                  for ( int  i = 0 ; i < 4 ; i ++ ) 
                  { 
                      int  nr = r + dr [ i ] ; 
                      int  nc = c + dc [ i ] ; 
 
                      if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&   ! vis [ nr ] [ nc ]   &&  mat [ nr ] [ nc ] == 1 ) 
                      { 
                         q . push ( { { nr , nc } , d + 1 } ) ; 
                         vis [ nr ] [ nc ] = 1 ; 
                      } 
                  } 
          } 
          return  mat ; 
      } 
  } ;