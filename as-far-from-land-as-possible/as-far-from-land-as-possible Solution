class   Solution   { 
 public : 
      int   maxDistance ( vector < vector < int >> &  grid )   { 
         
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
         queue < pair < pair < int , int > , int >>  q ; 
         for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] ) 
                      { 
                         vis [ i ] [ j ] = 1 ; 
                         q . push ( { { i , j } , 0 } ) ; 
                      } 
              } 
          } 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
 
          int  mx = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              auto  itr = q . front ( ) ; 
              int  r = itr . first . first ; 
              int  d = itr . second ; 
              int  c = itr . first . second ; 
             mx = max ( mx , d ) ; 
             q . pop ( ) ; 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  int  nr = dr [ i ] + r ; 
                  int  nc = dc [ i ] + c ; 
 
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&  grid [ nr ] [ nc ] == 0   &&   ! vis [ nr ] [ nc ] ) 
                  {    
                      //cout<<nr<<" "<<nc<<endl; 
                     vis [ nr ] [ nc ] = 1 ; 
                     q . push ( { { nr , nc } , d + 1 } ) ; 
                  } 
              } 
 
 
          } 
          if ( mx == 0 ) 
              return   - 1 ; 
          return  mx ; 
      } 
 } ;