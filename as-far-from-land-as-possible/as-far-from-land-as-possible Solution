class   Solution   { 
 public : 
      int   maxDistance ( vector < vector < int >> &  grid )   { 
         
          //bfs 
 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
 
     
         queue < pair < int , pair < int , int >> >  q ; 
         for ( int  i = 0 ; i < n ; i ++ ) 
         { 
             for ( int  j = 0 ; j < m ; j ++ ) 
             { 
                 if ( grid [ i ] [ j ] == 1 ) { 
                 q . push ( { 0 , { i , j } } ) ; 
                 grid [ i ] [ j ] = 2 ; 
                  } 
             } 
         } 
          int  ans = - 1 ; 
          while ( ! q . empty ( ) ) 
          { 
              auto   [ d , nd ] = q . front ( ) ; 
              auto   [ i , j ] = nd ; 
             ans = max ( ans , d ) ; 
             q . pop ( ) ; 
              for ( int  k = 0 ; k < 4 ; k ++ ) 
              { 
                  int  nr = i + dr [ k ] ; 
                  int  nc = j + dc [ k ] ; 
 
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&  grid [ nr ] [ nc ] == 0 ) 
                  {    
                          int  dd = abs ( nr - i ) + abs ( nc - j ) ; 
                         q . push ( { d + dd , { nr , nc } } ) ; 
                              grid [ nr ] [ nc ] = 2 ; 
                  } 
              } 
          } 
 
          if ( ans == 0 ) 
              return   - 1 ; 
          return  ans ; 
      } 
 } ;