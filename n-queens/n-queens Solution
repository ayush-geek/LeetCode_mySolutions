class   Solution   { 
 public : 
 
      void   solve ( int  i , int  n , vector < string > &  tmp , vector < vector < string >> &  res ) 
      { 
          if ( i == n ) 
          { 
             res . push_back ( tmp ) ; 
              return   ; 
          } 
 
          for ( int  l = 0 ; l < n ; l ++ ) 
          { 
              if ( valid ( i , l , tmp , n ) ) 
              { 
                 tmp [ i ] [ l ] = 'Q' ; 
                  solve ( i + 1 , n , tmp , res ) ; 
                  tmp [ i ] [ l ] = '.' ; 
              } 
          } 
      } 
 
      bool   valid ( int  r , int  c ,  vector < string > &  tmp , int  n ) 
      { 
          //col 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              if ( tmp [ i ] [ c ] == 'Q' &&  i != r ) 
                  return   false ; 
          } 
 
 
          //-45  degree 
 
 
          for ( int  i = r - 1 , j = c - 1 ; i >= 0   &&  j >= 0   ; i -- , j -- ) 
          { 
              if ( tmp [ i ] [ j ] == 'Q' ) 
                  return   false ; 
          } 
 
 
 
          //+45 degree 
 
           for ( int  i = r - 1 , j = c + 1 ; i >= 0   &&  j < n  ; i -- , j ++ ) 
          { 
              if ( tmp [ i ] [ j ] == 'Q' ) 
                  return   false ; 
          } 
 
          return   true ; 
      } 
 
     vector < vector < string >>   solveNQueens ( int  n )   { 
         vector < vector < string >>  res ; 
         vector < string >   tmp ( n , string ( n , '.' ) ) ; 
 
         
          solve ( 0 , n , tmp , res ) ; 
 
          return  res ; 
      } 
 } ;