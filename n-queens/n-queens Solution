class   Solution   { 
 public :  
 
      bool   safe ( int  i , int  j , vector < string > &  tmp ) 
      {     int  n = tmp . size ( ) ; 
          int  l = i - 1 , r = j - 1 ; 
        
 
          while ( l >= 0   &&  r >= 0   ) 
              { 
                  if ( tmp [ l ] [ r ] == 'Q' ) 
                      return   false ; 
                 l -- ; 
                 r -- ; 
              } 
         l = i - 1 ; 
         r = j + 1 ; 
        
          while ( l >= 0   &&  r < n  ) 
          { 
               if ( tmp [ l ] [ r ] == 'Q' ) 
                      return   false ; 
                 l -- ; 
                 r ++ ; 
          } 
 
         l = i - 1 ; 
        
 
          while ( l >= 0   ) 
          { 
               if ( tmp [ l ] [ j ] == 'Q' ) 
                      return   false ; 
             l -- ; 
               
          } 
          return   true ; 
      } 
 
      void   solve ( int  i , int  n , vector < string > &  tmp , vector < vector < string >> &  res ) 
      {    
          if ( i == n ) 
              { 
                 res . push_back ( tmp ) ; 
                  return   ; 
              } 
 
          for ( int  j = 0 ; j < n ; j ++ ) 
          {    
              if ( safe ( i , j , tmp ) ) 
              { 
                 tmp [ i ] [ j ] = 'Q' ; 
                  solve ( i + 1 , n , tmp , res ) ; 
                 tmp [ i ] [ j ] = '.' ; 
              } 
 
          } 
      } 
 
     vector < vector < string >>   solveNQueens ( int  n )   { 
         vector < vector < string >>  res ; 
         vector < string >   tmp ( n ,   string   ( n , '.' ) ) ; 
        
          solve ( 0 , n , tmp , res ) ; 
          return  res ; 
      } 
 } ;