class   Solution   { 
 public : 
 
     int   solve ( int  i , int  j , vector < int > &  cuts ,   vector < vector < int >> &  dp ) 
      { 
          if ( i > j ) 
              return   0 ; 
 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          int  mn = 0 ; 
 
          for ( int  ind = i ; ind <= j ; ind ++ ) 
          { 
              int  cur = cuts [ j + 1 ] * cuts [ ind ] * cuts [ i - 1 ] + solve ( i , ind - 1 , cuts , dp ) + solve ( ind + 1 , j , cuts , dp ) ; 
             mn = max ( mn , cur ) ; 
          } 
 
          return  dp [ i ] [ j ] = mn ; 
     
      } 
 
      int   maxCoins ( vector < int > &  nums )   { 
         
 
          //MCM 
 
          //WHY ??? 
          //just like partition for each element 
 
          //step1 
          //i =1 j=n 
 
 
          //last ballon to be bursted ->APPROACH 
          int  n = nums . size ( ) ; 
         nums . insert ( nums . begin ( ) , 1 ) ; 
         nums . push_back ( 1 ) ; 
         vector < vector < int >>   dp ( n + 2 , vector < int >   ( n + 2 , - 1 ) ) ; 
          return   solve ( 1 , n , nums , dp ) ; 
      } 
 } ;