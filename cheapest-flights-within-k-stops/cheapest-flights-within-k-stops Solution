class   Solution   { 
 public : 
      int   findCheapestPrice ( int  n ,  vector < vector < int >> &  flights ,   int  src ,   int  dst ,   int  k )   { 
 
         vector < pair < int , int >>  adj [ n ] ; 
 
          for ( int  i = 0 ; i < flights . size ( ) ; i ++ ) 
          { 
             adj [ flights [ i ] [ 0 ] ] . push_back ( { flights [ i ] [ 1 ] , flights [ i ] [ 2 ] } ) ; 
          } 
 
             vector < int >    dist ( n , INT_MAX ) ; 
             dist [ src ] = 0 ;     
 
         queue < pair < int , pair < int , int >> >  q ; 
 
         q . push ( { 0 , { src , 0 } } ) ; 
          //stops src dst 
 
 
          while ( ! q . empty ( ) ) 
          {    
              auto  qi = q . front ( ) ; 
              int  stp = qi . first ; 
              int  node = qi . second . first ; 
              int  d = qi . second . second ; 
             q . pop ( ) ; 
 
 
              if ( stp > k ) 
                  continue ; 
              for ( auto  it :  adj [ node ] ) 
              { 
                  int  adjnode = it . first ; 
                  int  wt = it . second ; 
 
 
                  if ( d + wt < dist [ adjnode ]   &&  stp <= k ) 
                  { 
                         dist [ adjnode ] = d + wt ; 
                         q . push ( { stp + 1 , { adjnode , dist [ adjnode ] } } ) ; 
                  } 
 
              } 
 
 
          } 
 
 
          if ( dist [ dst ] == INT_MAX ) 
              return   - 1 ; 
          else 
              return  dist [ dst ] ; 
 
      } 
 } ;