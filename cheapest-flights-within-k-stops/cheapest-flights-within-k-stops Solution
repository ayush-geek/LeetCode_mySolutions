class   Solution   { 
 public : 
      int   findCheapestPrice ( int  n ,  vector < vector < int >> &  flights ,   int  src ,   int  dst ,   int  k )   { 
         
         vector < int >   cost ( n , 1e9 ) ; 
         cost [ src ] = 0 ; 
 
         vector < vector < pair < int , int >> >   adj ( n ) ; 
 
          for ( auto &  ele :  flights ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( { ele [ 1 ] , ele [ 2 ] } ) ; 
          } 
         
          //K  cost src 
         queue < pair < int , pair < int , int >> >  q ; 
         q . push ( { 0 , { 0 , src } } ) ; 
          int  ans = INT_MAX ; 
          while ( ! q . empty ( ) ) 
          { 
              auto  nd = q . front ( ) ; 
             q . pop ( ) ; 
              int  ct = nd . first ; 
              int  node = nd . second . second ; 
              //cout<<node<<endl; 
              int  cst = nd . second . first ; 
              if ( node == dst ) 
                 ans = min ( ans , cst ) ; 
              if ( ct > k ) 
                  continue ; 
 
              for ( auto &  ele : adj [ node ] ) 
              { 
                  int  a = ele . first ; 
                  int  b = ele . second ; 
                 // cout<<a<<" "<<b<<endl; 
                  if ( ct <= k  &&  cost [ a ] > cst + b ) 
                  {    
                      //cout<<a<<endl; 
                     cost [ a ] = cst + b ; 
                     q . push ( { ct + 1 , { cost [ a ] , a } } ) ; 
                  } 
              } 
 
          } 
          if ( ans == INT_MAX ) 
              return   - 1 ; 
 
          return  ans ; 
      } 
 } ;