class   Solution   { 
 public : 
      int   findCheapestPrice ( int  n ,  vector < vector < int >> &  flights ,   int  src ,   int  dst ,   int  k )   { 
          // k stops 
          //tries to create a barrier 
 
          //k,src  
         vector < pair < int , int >>  adj [ n ] ; 
          for ( auto &  ele :  flights ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( { ele [ 1 ] , ele [ 2 ] } ) ; 
          } 
         vector < int >   dist ( n , 1e9 ) ; 
         dist [ src ] = 0 ; 
 
         queue < vector < int >>  pq ; 
         pq . push ( { 0 , src , 0 } ) ; 
          int  ans = 1e9 ; 
          while ( ! pq . empty ( ) ) 
          { 
              auto  nd = pq . front ( ) ; 
             pq . pop ( ) ; 
              int  stop = nd [ 0 ] ; 
              int  node = nd [ 1 ] ; 
              int  d = nd [ 2 ] ; 
 
              if ( stop > k ) 
                  continue ; 
             
              for ( auto &  ele :  adj [ node ] ) 
              {    
                  int  el = ele . first ; 
                  int  w = ele . second ; 
                  if ( stop <= k  &&  d + w < dist [ el ] ) { 
                     pq . push ( { stop + 1 , el , d + w } ) ; 
                     dist [ el ] = d + w ; 
                  } 
              } 
          } 
          if ( dist [ dst ] == 1e9 ) 
              return   - 1 ; 
          return  dist [ dst ] ; 
      } 
 } ;