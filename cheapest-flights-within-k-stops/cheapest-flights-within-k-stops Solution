class   Solution   { 
 public : 
      int   findCheapestPrice ( int  n ,  vector < vector < int >> &  flights ,   int  src ,   int  dst ,   int  k )   { 
         queue < pair < int , pair < int , int >> >  q ; 
          //k dist src 
         q . push ( { 0 , { 0 , src } } ) ; 
         vector < int >   dis ( n , 1e9 ) ; 
         dis [ src ] = 0 ; 
 
         vector < vector < int >>  adj [ n ] ; 
 
          for ( auto &  ele :  flights ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( { ele [ 1 ] , ele [ 2 ] } ) ; 
          } 
          while ( ! q . empty ( ) )  
          { 
              auto  nd = q . front ( ) ; 
             q . pop ( ) ; 
              int  steps = nd . first ; 
              int  d = nd . second . first ; 
              int  node = nd . second . second ; 
 
              if ( steps > k ) 
                  continue ; 
 
           
 
              for ( auto &  ele :  adj [ node ] ) 
              { 
                  int  nwnode = ele [ 0 ] ; 
                  int  w = ele [ 1 ] ; 
 
                  if ( steps <= k  &&  d + w < dis [ nwnode ] ) 
                  { 
                     q . push ( { steps + 1 , { d + w , nwnode } } ) ; 
                     dis [ nwnode ] = d + w ; 
                  } 
              } 
          }   
 
          if ( dis [ dst ] != 1e9 ) 
              return  dis [ dst ] ; 
 
          return   - 1 ; 
      } 
 } ;