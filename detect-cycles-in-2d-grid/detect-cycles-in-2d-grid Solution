class   Solution   { 
 public : 
 
      bool   solve ( int  i , int  j , int  pi , int  pj , vector < vector < char >> &  grid , vector < vector < int >> &  vis ) 
      {    
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
     
      //    cout<<i<<" "<<j<<endl; 
         
         vis [ i ] [ j ] = 1 ; 
 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
            bool  ans = false ; 
          for ( int  k = 0 ; k < 4 ; k ++ ) 
          { 
              int  nr = i + dr [ k ] ; 
              int  nc = j + dc [ k ] ; 
 
               if ( nr < 0   ||  nc < 0   ||  nr >= n  ||  nc >= m ) 
                  continue ; 
              if ( nr == pi  &&   nc == pj ) 
                  continue ; 
 
              if ( grid [ nr ] [ nc ] != grid [ i ] [ j ] ) 
                  continue ; 
              if ( vis [ nr ] [ nc ] ) { 
                 cout << i << " d" << j << endl ; 
                 cout << nr << " " << nc << endl ; 
                  return   true ; 
              } 
              if ( solve ( nr , nc , i , j , grid , vis ) ) 
                  return   true ; 
          } 
 
          return   false ; 
      } 
 
      bool   containsCycle ( vector < vector < char >> &  grid )   { 
         
 
          //dfs cycle dtetctiom 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
       
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( ! vis [ i ] [ j ] ) 
                  { 
                      if ( solve ( i , j , - 1 , - 1 , grid , vis ) ) 
                          return   true ; 
                  } 
              } 
          } 
          return   false ; 
      } 
 } ;