class   Solution   { 
 public : 
 
      int   solve ( int  i , int  j , vector < int > &  coins , vector < vector < int >> &  dp ) 
      { 
          if ( j == 0 ) 
              return   1 ; 
          if ( i == 0 ) 
              return  j % coins [ 0 ] == 0 ; 
 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
         
          //take 
          int  t = 0 ; 
          if ( coins [ i ] <= j ) 
             t = solve ( i , j - coins [ i ] , coins , dp ) ; 
 
          //not take 
          int  nt = solve ( i - 1 , j , coins , dp ) ; 
 
          return  dp [ i ] [ j ] = t + nt ; 
      } 
 
      int   change ( int  amount ,  vector < int > &  coins )   { 
          int  n = coins . size ( ) ; 
         vector < vector < int >>   dp ( n , vector < int >   ( amount + 1 , - 1 ) ) ; 
          return   solve ( n - 1 , amount , coins , dp ) ; 
      } 
 } ;