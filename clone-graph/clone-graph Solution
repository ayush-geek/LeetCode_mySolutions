/*
 // Definition for a Node.
 class Node {
 public:
     int val;
     vector<Node*> neighbors;
     Node() {
         val = 0;
         neighbors = vector<Node*>();
     }
     Node(int _val) {
         val = _val;
         neighbors = vector<Node*>();
     }
     Node(int _val, vector<Node*> _neighbors) {
         val = _val;
         neighbors = _neighbors;
     }
 };
 */ 
 
 class   Solution   { 
 public : 
     map < int , Node * >  mp ; 
     Node *   cloneGraph ( Node *  node )   { 
  
          if ( node == NULL ) 
              return   NULL ; 
          int  z = node -> val ; 
         Node *   newnode = new   Node ( z ) ; 
         mp [ z ] = newnode ; 
          for ( auto &  ele :  node -> neighbors ) 
          { 
              if ( mp . find ( ele -> val ) == mp . end ( ) ) 
              { 
                 newnode -> neighbors . push_back ( cloneGraph ( ele ) ) ; 
              } 
              else 
              { 
                 newnode -> neighbors . push_back ( mp [ ele -> val ] ) ; 
              } 
          } 
 
          return  newnode ; 
         
      } 
 } ;