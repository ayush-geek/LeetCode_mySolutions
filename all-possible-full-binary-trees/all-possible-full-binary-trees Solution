/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
 unordered_map < int , vector < TreeNode * >>  dp ; 
     vector < TreeNode * >   allPossibleFBT ( int  n )   { 
         //memoization+dc 
     vector < TreeNode * >  ans ; 
         if ( n < 1 ||  n % 2 == 0 ) 
          { 
            
              return  ans ; 
          }  
 
          if ( dp . find ( n ) != dp . end ( ) ) 
              { 
                  return  dp [ n ] ; 
              } 
         
          if ( n == 1 ) 
          { 
              TreeNode *  node = new   TreeNode ( 0 ) ; 
            
             ans . push_back ( node ) ; 
              return  dp [ 1 ] = ans ; 
          } 
     
          for ( int  i = 1 ; i < n ; i += 2 ) 
          { 
            
            vector < TreeNode * >  lft = allPossibleFBT ( i ) ; 
             vector < TreeNode * >  rgt = allPossibleFBT ( n - 1 - i ) ; 
 
              for ( auto &  ele :  lft ) 
              { 
                  for ( auto & el2 :  rgt ) 
                  { 
                           TreeNode *  nd = new   TreeNode ( 0 ) ; 
                           nd -> left = ele ; 
                           nd -> right = el2 ; 
                           ans . push_back ( nd ) ; 
                  } 
              } 
          } 
          return  dp [ n ] = ans ; 
     
      } 
 } ;