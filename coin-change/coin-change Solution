class   Solution   { 
 public : 
 
      int   solve ( int  i , int  j , vector < int > &  coins , vector < vector < int >> &  dp ) 
      { 
 
 
              if ( j == 0 ) 
                  return   0 ; 
              if ( i >= coins . size ( ) ) 
                  return   1e9 ; 
              if ( dp [ i ] [ j ] != - 1 ) 
                  return  dp [ i ] [ j ] ; 
 
              //pick 
              int  p = 1e9 ; 
              if ( coins [ i ] <= j ) 
              { 
                 p = 1 + solve ( i , j - coins [ i ] , coins , dp ) ; 
              } 
 
              int  np = solve ( i + 1 , j , coins , dp ) ; 
 
              return  dp [ i ] [ j ] = min ( p , np ) ; 
      } 
 
      int   coinChange ( vector < int > &  coins ,   int  amount )   { 
          int  n = coins . size ( ) ; 
 
         vector < vector < int >>   dp ( n , vector < int >   ( amount + 1 , - 1 ) ) ; 
 
          int  ans =   solve ( 0 , amount , coins , dp ) ; 
 
          if ( ans >= 1e9 ) 
              return   - 1 ; 
          return  ans ; 
      } 
 } ;