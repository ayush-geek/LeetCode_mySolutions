class   Solution   { 
 public : 
 
      int   solve ( int  i , int  j , vector < vector < int >> &  grid , vector < vector < int >> &  dp ) 
      { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
          if ( i < 0   ||  j < 0   ||  i >= n  ||  j >= m  ||   ! grid [ i ] [ j ]   ||  dp [ i ] [ j ] ) 
              return   0 ; 
         dp [ i ] [ j ] = 1 ; 
 
 
          int  l = solve ( i , j - 1 , grid , dp ) ; 
          int  r = solve ( i , j + 1 , grid , dp ) ; 
          int  t = solve ( i - 1 , j , grid , dp ) ; 
          int  b = solve ( i + 1 , j , grid , dp ) ; 
 
          return  l + r + t + b + 1 ; 
 
      } 
 
      int   maxAreaOfIsland ( vector < vector < int >> &  grid )   { 
         
          //dfs 
 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          int  ans = 0 ; 
 
         vector < vector < int >>   dp ( n , vector < int >   ( m , 0 ) ) ; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ]   &&   ! dp [ i ] [ j ] ) 
                  { 
                     ans = max ( ans , solve ( i , j , grid , dp ) ) ; 
                  } 
              } 
          } 
          return  ans ; 
      } 
 } ;