class   Solution   { 
 public : 
      int   longestSubarray ( vector < int > &  nums )   { 
          int  n = nums . size ( ) ; 
         vector < int >   p ( n , 0 ) ; 
         vector < int >   s ( n , 0 ) ; 
 
          for ( int  i = 1 ; i < n ; i ++ ) 
          { 
              if ( nums [ i - 1 ] != 0 ) 
                 p [ i ] = p [ i - 1 ] + 1 ; 
              else 
                 p [ i ] = 0 ; 
          } 
 
          for ( int  i = n - 2 ; i >= 0 ; i -- ) 
          { 
              if ( nums [ i + 1 ] != 0 ) 
              { 
                 s [ i ] = 1 + s [ i + 1 ] ; 
              } 
              else 
             s [ i ] = 0 ; 
          } 
 
          int  ct = 0 ; 
          int  ans = 0 ; 
          for ( int  i = 1 ; i < n - 1 ; i ++ ) 
          { 
              if (  nums [ i ] == 0 ) 
              {    ct ++ ; 
                 ans = max ( ans , p [ i ] + s [ i ] ) ; 
              } 
 
          } 
 
          if ( ct == 0 ) 
              return  p [ n - 1 ] ; 
         
         ans = max ( ans , s [ 1 ] +   ( ( nums [ 0 ] == 1 ) ? 1 : 0 ) ) ; 
         ans = max ( ans , p [ n - 2 ] + ( ( nums [ n - 1 ] == 1 ) ? 1 : 0 ) ) ; 
 
          return  ans ; 
         
 
 
      } 
 } ;