class   Solution   { 
  public : 
 
      bool   dfs ( int  i , int  c , vector < vector < int >> &  graph ,  vector < int > &  vis ) 
      { 
          int  n = graph . size ( ) ; 
          // int m=graph[0].size(); 
 
     
 
         vis [ i ] = c ; 
 
          for ( auto  ele :  graph [ i ] ) 
              { 
                  if ( vis [ ele ] == 0 ) 
                      { 
                          if ( dfs ( ele , - c , graph , vis ) == false ) 
                              return   false ; 
 
                      } 
                  else   if ( vis [ ele ] == c ) 
                      return   false ; 
              } 
 
          return   true ; 
      } 
 
 
      bool   isBipartite ( vector < vector < int >> &  graph )   { 
         
 
          //Dfs 
 
          int  n = graph . size ( ) ; 
          // int m=graph[0].size(); 
 
          // vector<vector<int>> vis(n,vector<int> (m,0)); 
         vector < int >   vis ( n , 0 ) ; 
          //0 Not colored 
          //1 col red 
          //-1 col blue 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          {    
              if ( ! vis [ i ] ) 
              { 
                       if (   dfs ( i , 1 , graph , vis ) == false ) 
                          return   false ; 
              } 
            
          } 
 
          return   true ; 
         
      
 
      } 
  } ;