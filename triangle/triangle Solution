class   Solution   { 
  public : 
 
      int   solve ( int  i , int  j , vector < vector < int >> &  triangle , vector < vector < int >> &  dp ) 
      { 
          int  n = triangle . size ( ) ; 
 
          if ( j < 0 ) 
              return   1e9 ; 
      if ( i == n ) 
          return   0 ; 
 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
         
          //dowm 
          int  d = 1e9 ; 
          int  dr = 1e9 ; 
 
         d = triangle [ i ] [ j ]   +   solve ( i + 1 , j , triangle , dp ) ; 
         dr =  triangle [ i ] [ j ]   +   solve ( i + 1 , j + 1 , triangle , dp ) ; 
 
          return  dp [ i ] [ j ] = min ( d , dr ) ; 
      } 
 
      int   minimumTotal ( vector < vector < int >> &  triangle )   { 
 
          //Variable starting Point 
 
          //Memozation  
          int  n = triangle . size ( ) ; 
         vector < vector < int >>   dp ( n , vector < int > ( n , - 1 ) ) ; 
     
          return   solve ( 0 , 0 , triangle , dp ) ; 
 
 
 
 
         
      } 
  } ;