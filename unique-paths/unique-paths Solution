class   Solution   { 
  public : 
 
 
    
 
      int   solve ( int  i , int  j , vector < vector < int >> &  dp ) 
      { 
          if ( i == 0   &&  j == 0 ) 
              return   1 ; 
 
          if ( i < 0   ||  j < 0 ) 
              return   0 ; 
 
 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
 
 
          int  lft = 0 ; 
          int  up = 0 ; 
         up = ( solve ( i - 1 , j , dp ) ) ; 
         lft  = ( solve ( i , j - 1 , dp ) ) ; 
 
 
          return  dp [ i ] [ j ]   = ( lft + up ) ; 
      } 
 
 
      int   uniquePaths ( int  m ,   int  n )   { 
 
         vector < vector < int >>   dp ( m + 1 , vector < int >   ( n + 1 , 0 ) ) ; 
 
 
              // return solve(m-1,n-1,dp); 
 
    
     dp [ 1 ] [ 1 ] = 1 ; 
          for ( int  i = 1 ; i <= m ; i ++   ) 
          { 
              for ( int  j = 1 ; j <= n ; j ++ ) 
              {    
                 
                    
                     dp [ i ] [ j ] += dp [ i ] [ j - 1 ] ; 
 
                    
                     dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; 
              } 
          } 
 
          return  dp [ m ] [ n ] ; 
      } 
  } ;