class   Solution   { 
 public : 
      int   minDays ( long   long  n )   { 
         
 
          //bfs 
         queue < long   long >  q ; 
         q . push ( n ) ; 
          int  steps = 0 ; 
         set < long   long >  st ; 
         st . insert ( n ) ; 
          while ( ! q . empty ( ) ) 
          {    
              int  sz = q . size ( ) ; 
 
              while ( sz -- ) 
              { 
                  long   long  nd = q . front ( ) ; 
                 q . pop ( ) ; 
                  //cout<<nd<<endl; 
                  if ( nd == 0 ) 
                     return  steps ; 
                  if ( st . find ( nd - 1 ) == st . end ( ) ) 
                  { 
                     st . insert ( nd - 1 ) ; 
                      q . push ( nd - 1 ) ; 
 
                       //cout<<q.back()<<endl; 
                  } 
                
                  if ( nd % 2 == 0   &&  st . find ( nd -   ( nd / 2 ) ) == st . end ( ) ) 
                  {    
                      if ( nd - ( nd / 2 ) >= 0 ) 
                      { 
                      st . insert ( nd -   ( nd / 2 ) ) ; 
                       q . push ( nd - ( nd / 2 ) ) ; 
 
                       //  cout<<q.back()<<endl; 
                      } 
                  } 
 
                   if ( nd % 3 == 0   &&  st . find ( nd - (   ( nd ) / 3   * 2 ) ) == st . end ( ) ) 
                  {    
                        if ( nd - ( nd / 3   * 2 ) >= 0 ) { 
                      st . insert ( nd -   ( nd / 3   * 2 ) ) ; 
                       q . push ( nd - ( nd / 3   * 2 ) ) ; 
                      // cout<<nd<<endl; 
                      //    cout<<q.back()<<endl; 
                        } 
                  }  
                 
                 
              } 
           
 
           
 
 
             steps ++ ; 
          } 
 
          return  steps ; 
      } 
 } ;