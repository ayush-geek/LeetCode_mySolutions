class   Solution   { 
 public : 
      int   minimumCost ( int  n ,  vector < vector < int >> &  connections )   { 
         
          //mst 
          //prim 
 
         vector < vector < int >>  adj [ n + 1 ] ; 
          // adj.resize(n+1); 
          for ( auto &  ele :  connections ) 
          { 
              int  a = ele [ 0 ] ; 
              int  b = ele [ 1 ] ; 
              int  w = ele [ 2 ] ; 
 
             adj [ a ] . push_back ( { b , w } ) ; 
             adj [ b ] . push_back ( { a , w } ) ; 
          } 
         vector < int >   vis ( n + 1 , 0 ) ; 
         priority_queue < vector < int >>  pq ; 
         pq . push ( { 0 , 1 } ) ; 
          int  ans = 0 ; 
          int  ct = 0 ; 
          while ( ! pq . empty ( ) ) 
          { 
              auto  nd = pq . top ( ) ; 
             pq . pop ( ) ; 
 
              int  wt = abs ( nd [ 0 ] ) ; 
              int  node = nd [ 1 ] ; 
 
              if ( vis [ node ] ) 
                  continue ; 
             vis [ node ] = 1 ; 
             ans += wt ; 
             ct ++ ;    
 
              for ( auto &  ele :  adj [ node ] ) 
              { 
                  if ( ! vis [ ele [ 0 ] ] ) 
                      { 
                         pq . push ( { - 1 * ele [ 1 ] , ele [ 0 ] } ) ; 
                      } 
              } 
          } 
 
 
          if ( ct == n ) 
              return  ans ; 
          return   - 1 ; 
      } 
 } ;