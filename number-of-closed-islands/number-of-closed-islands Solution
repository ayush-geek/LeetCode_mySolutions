class   Solution   { 
 public : 
 
      void   bfs ( int  i , int  j , vector < vector < int >> &  vis , vector < vector < int >> &  grid ) 
      {    
           int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
         queue < pair < int , int >>  q ; 
         q . push ( { i , j } ) ; 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
 
            while ( ! q . empty ( ) ) 
          { 
              auto  nd = q . front ( ) ; 
             q . pop ( ) ; 
 
              int  r = nd . first ; 
              int  c = nd . second ; 
 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  int  nr = r + dr [ i ] ; 
                  int  nc = c + dc [ i ] ; 
 
                  if ( nr >= 0    &&  nr < n  &&  nc >= 0   &&  nc < m  &&  grid [ nr ] [ nc ] == 0   &&   ! vis [ nr ] [ nc ] ) 
                      { 
                         vis [ nr ] [ nc ] = 1 ; 
                         q . push ( { nr , nc } ) ; 
                      } 
              } 
             
          } 
      } 
 
      int   closedIsland ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              if ( grid [ i ] [ 0 ] == 0 ) 
              { 
                 vis [ i ] [ 0 ] = 1 ; 
                 // q.push({i,0}); 
                  bfs ( i , 0 , vis , grid ) ; 
              } 
 
               if ( grid [ i ] [ m - 1 ] == 0 ) 
              { 
                 vis [ i ] [ m - 1 ] = 1 ; 
                 // q.push({i,m-1}); 
                   bfs ( i , m - 1 , vis , grid ) ; 
              } 
          } 
 
          for ( int  j = 0 ; j < m ; j ++ ) 
          { 
              if ( grid [ 0 ] [ j ] == 0 ) 
              { 
                 vis [ 0 ] [ j ] = 1 ; 
                  bfs ( 0 , j , vis , grid ) ; 
              } 
 
              if ( grid [ n - 1 ] [ j ] == 0 ) 
              { 
                 vis [ n - 1 ] [ j ] = 1 ; 
                 bfs ( n - 1 , j , vis , grid ) ; 
              } 
          }   
 
        int  ans = 0 ; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( ! vis [ i ] [ j ]   &&  grid [ i ] [ j ] == 0 ) { 
                      bfs ( i , j , vis , grid ) ; 
                     ans ++ ; 
                  } 
              } 
          } 
          return  ans ; 
      } 
   } ;