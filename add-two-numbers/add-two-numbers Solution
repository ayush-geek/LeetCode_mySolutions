/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
  class   Solution   { 
  public : 
     
     ListNode *   reverse ( ListNode *  head ) 
      { 
          if ( head == NULL ) 
              return   NULL ; 
         
         ListNode *  prev = NULL ; 
 
          while ( head != NULL ) 
          {    
             
             ListNode *  tmp = head -> next ; 
             head -> next = prev ; 
             prev = head ; 
             head = tmp ; 
          } 
          return  prev ; 
      } 
     
     ListNode *   addTwoNumbers ( ListNode *  l1 ,  ListNode *  l2 )   { 
         
         // l1=reverse(l1); 
          //l2=reverse(l2); 
 
         ListNode *  p1 = NULL ; 
         ListNode *  p2 = NULL ; 
         ListNode *  tmp = l1 ; 
          int  carry = 0 ; 
          while ( l1 != NULL   &&  l2 != NULL ) 
          {    p1 = l1 ; 
             p2 = l2 ; 
              int  v = l1 -> val + l2 -> val + carry ; 
 
              if ( v > 9 ) 
              { 
                 carry = 1 ; 
                 v = v % 10 ; 
              } 
              else 
                 carry = 0 ; 
             l1 -> val = v ; 
             l1 = l1 -> next ; 
             l2 = l2 -> next ; 
          } 
 
          while ( l1 != NULL ) 
          {    
             p1 = l1 ; 
                  int  v = l1 -> val + carry ; 
 
              if ( v > 9 ) 
              { 
                 carry = 1 ; 
                 v = v % 10 ; 
              } 
               else 
                 carry = 0 ; 
             l1 -> val = v ; 
             l1 = l1 -> next ; 
          } 
 
         
          while ( l2 != NULL ) 
          { 
                  int  v = l2 -> val + carry ; 
 
              if ( v > 9 ) 
              { 
                 carry = 1 ; 
                 v = v % 10 ; 
              } 
               else 
                 carry = 0 ; 
             l2 -> val = v ; 
             p1 -> next = l2 ; 
             p1 = p1 -> next ; 
             l2 = l2 -> next ; 
          } 
 
          if ( carry == 1 ) 
          { 
             p1 -> next = new   ListNode ( 1 ) ; 
          } 
 
          return  tmp ; 
 
      } 
  } ;