class   Solution   { 
 public : 
     
      
      int   solve ( vector < vector < int >> &  ocean  , int  i , int  j , vector < vector < int >> &  heights ) 
      { 
          if ( i < 0   ||  j < 0   ||  i >= ocean . size ( )   ||  j >= ocean [ 0 ] . size ( ) ||  heights [ i ] [ j ] == 1e9 ) 
              return   0 ; 
         
          if ( ocean [ i ] [ j ] ) 
              return   1 ; 
         
          int  k = heights [ i ] [ j ] ; 
         
         
         heights [ i ] [ j ] = 1e9 ; //Visited; 
          int  ans = 0 ; 
         
         
         
          //dfs 
         
          if ( i > 0   &&  heights [ i - 1 ] [ j ] <= k  ) 
             ans = ans  ||   solve ( ocean , i - 1 , j , heights ) ; 
          if ( j > 0   &&  heights [ i ] [ j - 1 ] <= k ) 
             ans = ans  ||   solve ( ocean , i , j - 1 , heights ) ; 
          if ( i + 1 < ocean . size ( )   &&  heights [ i + 1 ] [ j ] <= k  ) 
             ans = ans  ||   solve ( ocean , i + 1 , j , heights ) ; 
          if ( j + 1 < ocean [ 0 ] . size ( )   &&  heights [ i ] [ j + 1 ] <= k ) 
             ans = ans  ||   solve ( ocean , i , j + 1 , heights ) ; 
         
         
         ocean [ i ] [ j ] = ans ; 
         
         heights [ i ] [ j ] = k ; 
         
          return  ans ; 
         
      } 
     
     vector < vector < int >>   pacificAtlantic ( vector < vector < int >> &  heights )   { 
         
         
          //To Returnn Position where WATER to Both Ocean 
         
         
          int  n = heights . size ( ) ; 
          int  m = heights [ 0 ] . size ( ) ; 
         
         vector < vector < int >>   pac ( n , vector < int >   ( m , 0 ) ) ; 
           vector < vector < int >>   atl ( n , vector < int >   ( m , 0 ) ) ; 
           vector < vector < int >>  res ;  
            for ( int  i = 0 ; i < n ; i ++ ) 
          {    
             pac [ i ] [ 0 ] = 1 ; 
             atl [ i ] [ m - 1 ] = 1 ; 
             
          } 
         
          for ( int  j = 0 ; j < m ; j ++ ) 
          {    
             pac [ 0 ] [ j ] = 1 ; 
             atl [ n - 1 ] [ j ] = 1 ; 
             
          } 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( solve ( pac , i , j , heights )   &&   solve ( atl , i , j , heights ) ) 
                     res . push_back ( { i , j } ) ; 
              } 
          } 
         
          return  res ; 
      } 
 } ;