class   Solution   { 
 public : 
      long   long   totalCost ( vector < int > &  costs ,   int  candidates ,   int  k )   { 
          long   long  ans = 0 ; 
 
         priority_queue < int , vector < int > , greater < int >>  pq1 ; 
         priority_queue < int , vector < int > , greater < int >>  pq2 ; 
 
     
          int  i = 0 ; 
          int  j = costs . size ( ) - 1 ; 
 
         while ( 1 ) 
         { 
             while ( i <= j  &&  pq1 . size ( ) < k ) 
              { 
                 pq1 . push ( costs [ i ++ ] ) ; 
              } 
 
                while ( i <= j  &&  pq2 . size ( ) < k ) 
              { 
                 pq2 . push ( costs [ j -- ] ) ; 
              } 
              //cout<<i<<" "<<j<<endl; 
              if ( ( pq1 . size ( ) == k  &&  pq2 . size ( ) == k )   ||  i >= j ) 
              {    
 
                  int  z1 = INT_MAX ; 
              if ( pq1 . size ( ) > 0 ) 
                 z1 = pq1 . top ( ) ; 
       
                  int  z2 = INT_MAX ; 
                 
                  if ( pq2 . size ( ) > 0 ) 
                 z2 = pq2 . top ( ) ; 
             // cout<<" s"<<" "<<z1<<" "<<z2<<endl; 
 
                  if ( z1 <= z2 ) 
                      { 
                         ans += z1 ; 
                         pq1 . pop ( ) ; 
                      } 
                  else 
                  { 
                       ans += z2 ; 
                         pq2 . pop ( ) ; 
                  } 
 
                 candidates -- ; 
 
 
              } 
 
              if ( candidates == 0 ) 
                  break ; 
         
             // cout<<ans<<endl; 
         } 
         return  ans ; 
      } 
 } ;