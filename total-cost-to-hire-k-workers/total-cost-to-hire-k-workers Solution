class   Solution   { 
 public : 
      long   long   totalCost ( vector < int > &  cost ,   int  candidates ,   int  k )   { 
         
 
         priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >> >  pq1 ; 
         priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >> >  pq2 ; 
 
          int  n = cost . size ( ) ; 
          int  i = 0 ; 
          int  j = cost . size ( ) - 1 ; 
 
          while ( i < n  &&  pq1 . size ( ) < k ) 
          { 
             pq1 . push ( { cost [ i ] , i } ) ; 
             i ++ ; 
          } 
 
           while ( j >= i  &&  pq2 . size ( ) < k ) 
          { 
             pq2 . push ( { cost [ j ] , j } ) ; 
             j -- ; 
          } 
 
          int  z = k ; 
          long   long  ans = 0 ; 
          while ( candidates -- ) 
          { 
             
              if ( pq1 . size ( ) > 0   &&  pq2 . size ( ) > 0 ) 
              { 
                  int  k1 = pq1 . top ( ) . first ; 
                  int  k2 = pq2 . top ( ) . first ; 
                 
                  if ( k1 < k2 ) 
                  { 
                     ans += 1ll * k1 ; 
                     pq1 . pop ( ) ; 
                  } 
                  else   if ( k1 > k2 ) 
                  { 
                     ans += 1ll * k2 ; 
                     pq2 . pop ( ) ; 
                  } 
                  else 
                  { 
                      if ( pq1 . top ( ) . second < pq2 . top ( ) . second ) 
                          { 
                             ans += 1ll * k1 ; 
                             pq1 . pop ( ) ; 
                          } 
                      else 
                      { 
                         ans += 1ll * k2 ; 
                         pq2 . pop ( ) ; 
                      } 
                  } 
              } 
 
              else   if ( pq1 . size ( ) > 0 ) 
              { 
                   int  k1 = pq1 . top ( ) . first ; 
                     ans += 1ll * k1 ; 
                     pq1 . pop ( ) ; 
              } 
              else  
              { 
                   int  k2 = pq2 . top ( ) . first ; 
                     ans += 1ll * k2 ; 
                     pq2 . pop ( ) ; 
              } 
 
 
              if ( i <= j  &&  pq1 . size ( ) < k ) 
                  { 
                     pq1 . push ( { cost [ i ] , i } ) ; 
                     i ++ ; 
                  } 
               if ( i <= j  &&  pq2 . size ( ) < k ) 
                  { 
                     pq2 . push ( { cost [ j ] , j } ) ; 
                     j -- ; 
                  } 
             
              // cout<<ans<<endl; 
          } 
 
          return  ans ; 
         
      } 
 } ;