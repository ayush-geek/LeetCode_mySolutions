class   Solution   { 
 public : 
      long   long   totalCost ( vector < int > &  costs ,   int  k ,   int  candi )   { 
      
         
          long   long  ans = 0 ; 
         
         priority_queue < int ,  vector < int > ,  greater < int >   >  pq1 ; 
         priority_queue < int ,  vector < int > ,  greater < int >   >  pq2 ; 
         
         
          int  n = costs . size ( ) ; 
          int  i = 0 ; 
          for ( ; i < candi ; i ++ ) 
          { 
             pq1 . push ( costs [ i ] ) ; 
          } 
         
          int  pos = candi ; 
          int  j = n - 1 ; 
          while ( pos -- ) 
          { 
              if ( j >= i ) 
                  pq2 . push ( costs [ j ] ) ; 
             j -- ; 
             
         
          } 
        
         cout << pq2 . size ( ) << endl ; 
         
          while ( k -- ) 
          { 
              if ( pq1 . empty ( )   &&  pq2 . empty ( ) ) 
                  break ; 
                 
              if ( ! pq1 . empty ( )   &&   ! pq2 . empty ( ) ) 
              { int  z1 = pq1 . top ( ) ; 
              int  z2 = pq2 . top ( ) ; 
             
             ans += min ( z1 , z2 ) ; 
             
              if ( z1 <= z2 ) 
              { 
                 pq1 . pop ( ) ; 
                  if ( i <= j ) 
                     pq1 . push ( costs [ i ++ ] ) ; 
                 
              } 
             
              else 
              { 
                 pq2 . pop ( ) ; 
                  if ( j >= i ) 
                  { 
                     pq2 . push ( costs [ j -- ] ) ; 
                  } 
              } 
              } 
             
              else   if ( pq2 . empty ( ) ) 
              { 
                 ans += pq1 . top ( ) ; 
                 pq1 . pop ( ) ; 
              } 
              else 
              { 
                 ans += pq2 . top ( ) ; 
                 pq2 . pop ( ) ; 
              } 
          } 
         
          return  ans ; 
         
      } 
 } ;