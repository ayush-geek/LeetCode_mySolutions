class   Solution   { 
 public : 
 
       int   solve ( int  i , int  j , vector < vector < int >> &  dp , vector < vector < int >> &  obstacleGrid ) 
      { 
         
 
          if ( i < 0   || j < 0 ) 
              return   0 ; 
 
             if ( obstacleGrid [ i ] [ j ] == 1 ) 
                  return   0 ; 
              if ( i == 0   &&  j == 0 ) 
              return   1 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
 
 
 
          int  left = solve ( i , j - 1 , dp , obstacleGrid ) ; 
          int  top = solve ( i - 1 , j , dp , obstacleGrid ) ; 
 
          return  dp [ i ] [ j ] = left + top ;  
      } 
      int   uniquePathsWithObstacles ( vector < vector < int >> &  obstacleGrid )   { 
         
 
          //same as unique paths 
          //add 
 
          int  m = obstacleGrid . size ( ) ; 
          int  n = obstacleGrid [ 0 ] . size ( ) ; 
 
          vector < vector < int >>   vis ( m , vector < int >   ( n , - 1 ) ) ; 
          return   solve ( m - 1 , n - 1 , vis , obstacleGrid ) ; 
      } 
 } ;