class   Solution   { 
 public : 
     
      void   dfs ( int  i , int  j , vector < vector < int >> &  grid , vector < vector < int >> &  vis ) 
      {    
         
            int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         
          if ( i < 0   ||  i >= n  ||  j < 0   ||  j >= m  ||  grid [ i ] [ j ] == 0   || vis [ i ] [ j ] ) 
                  return   ; 
         vis [ i ] [ j ] = 1 ; 
         
         
          dfs ( i - 1 , j , grid , vis ) ; 
                  dfs ( i + 1 , j , grid , vis ) ; 
 
                  dfs ( i , j - 1 , grid , vis ) ; 
 
                  dfs ( i , j + 1 , grid , vis ) ; 
 
         
         
      } 
 
      int   count ( vector < vector < int >> &  grid ) 
      { 
           int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
              int  cp = 0 ; 
              for ( int  i = 0 ; i < n ; i ++ ) 
              { 
                  for ( int  j = 0 ; j < m ; j ++ ) 
                  { 
                      if ( grid [ i ] [ j ]   &&   ! vis [ i ] [ j ] ) 
                      { 
                         cp ++ ; 
                          dfs ( i , j , grid , vis ) ; 
                      } 
                  } 
              } 
          return  cp ; 
      } 
     
      int   minDays ( vector < vector < int >> &  grid )   { 
         
          //if already not connected 
         
         
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         
          int  cp = count ( grid ) ; 
         
          if ( cp > 1   ||  cp == 0 ) 
                  return   0 ; 
         
         
          //1 case 
          //remove 1 point 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
              { 
                  for ( int  j = 0 ; j < m ; j ++ ) 
                  { 
                      if ( grid [ i ] [ j ] ) 
                      { 
                         grid [ i ] [ j ] = 0 ; 
 
                          int  ct = count ( grid ) ; 
 
                          if ( ct == 0   ||  ct > 1 ) 
                              return   1 ; 
                         grid [ i ] [ j ] = 1 ; 
                      } 
                  } 
              } 
         
        
 
 
         return   2 ; 
      } 
 } ;