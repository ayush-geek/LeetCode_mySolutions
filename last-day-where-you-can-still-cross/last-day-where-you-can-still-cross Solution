class   Solution   { 
 public : 
 
      bool   solve ( int  r , int  c , int  md , vector < vector < int >> &  cells ) 
      {     
         vector < vector < int >>   grid ( r , vector < int >   ( c , 0 ) ) ; 
          for ( int  i = 0 ; i <= md ; i ++ ) 
          { 
             grid [ cells [ i ] [ 0 ] - 1 ] [ cells [ i ] [ 1 ] - 1 ] = 1 ; 
          } 
 
 
          //bfs 
         queue < pair < int , int >>  q ; 
          vector < vector < int >>   vis ( r , vector < int >   ( c , 0 ) ) ; 
 
          for ( int  j = 0 ; j < c ; j ++ ) 
          { 
              if ( grid [ 0 ] [ j ] == 0 ) { 
                 q . push ( { 0 , j } ) ; 
                 vis [ 0 ] [ j ] = 1 ; 
                  } 
          } 
 
          int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
          int  dc [ ] = { 0 , - 1 , 0 , 1 } ; 
 
          while ( ! q . empty ( ) ) 
          { 
              auto   [ i , j ] = q . front ( ) ; 
             q . pop ( ) ; 
 
              if ( i == r - 1 ) 
                  return   true ; 
              for ( int  k = 0 ; k < 4 ; k ++ ) 
              { 
                  int  nr = i + dr [ k ] ; 
                  int  nc = j + dc [ k ] ; 
 
 
                  if ( nr >= 0   &&  nr < r  &&  nc >= 0   &&  nc < c  &&   ! vis [ nr ] [ nc ]   &&  grid [ nr ] [ nc ] == 0 ) 
                  { 
                     q . push ( { nr , nc } ) ; 
                     vis [ nr ] [ nc ] = 1 ; 
                  } 
              } 
          } 
 
          return   false ; 
      } 
 
      int   latestDayToCross ( int  row ,   int  col ,  vector < vector < int >> &  cells )   { 
         
          //BS + BFs 
   
          int  l = 0 ; 
          int  h = cells . size ( ) - 1 ; 
          int  ans = 0 ; 
          while ( l <= h ) 
          { 
              int  mid = ( l ) + ( h - l ) / 2 ; 
 
              if ( solve ( row , col , mid , cells ) ) 
              {    
                 
                 ans = mid + 1 ; 
                 l = mid + 1 ; 
              } 
              else 
              { 
                 h = mid - 1 ; 
              } 
              //cout<<mid<<endl; 
 
          } 
 
          return  ans ; 
      } 
 } ;