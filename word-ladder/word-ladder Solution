class   Solution   { 
 public : 
      int   ladderLength ( string beginWord ,  string endWord ,  vector < string > &  wordList )   { 
         
         unordered_set < string >   st ( wordList . begin ( ) , wordList . end ( ) ) ; 
 
          //bfs 
         queue < pair < string , int >>  q ; 
         q . push ( { beginWord , 0 } ) ; 
 
          if ( beginWord == endWord ) 
              return   1 ; 
          if ( st . count ( beginWord ) == 1 ) 
             st . erase ( beginWord ) ; 
 
          while ( ! q . empty ( ) ) 
          { 
              auto  nd = q . front ( ) ; 
             q . pop ( ) ; 
 
             string cur = nd . first ; 
              int  step = nd . second ; 
 
              if ( cur == endWord ) 
                  return  step + 1 ; 
 
              for ( int  i = 0 ; i < cur . size ( ) ; i ++ ) 
              {     char  alpha = cur [ i ] ; 
                  for ( char  zz = 'a' ; zz <= 'z' ; zz ++ ) 
                  { 
                    cur [ i ] = zz ; 
                     if ( st . count ( cur ) == 1 ) 
                          { 
                             q . push ( { cur , step + 1 } ) ; 
                               st . erase ( cur ) ; 
                          } 
                  } 
                 cur [ i ] = alpha ; 
              } 
          } 
          return   0 ; 
      } 
 } ;