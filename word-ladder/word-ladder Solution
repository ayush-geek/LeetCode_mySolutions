class   Solution   { 
 public : 
      int   ladderLength ( string beginWord ,  string endWord ,  vector < string > &  wordList )   { 
         
         unordered_set < string >   st ( wordList . begin ( ) , wordList . end ( ) ) ; 
          if ( st . count ( endWord ) == 0 ) 
              return   0 ; 
         queue < pair < string , int >>  q ; 
         q . push ( { beginWord , 0 } ) ; 
         st . erase ( beginWord ) ; 
 
          while ( ! q . empty ( ) ) 
          { 
              auto  node = q . front ( ) ; 
             string nd = node . first ; 
              int  ct = node . second ; 
             q . pop ( ) ; 
 
              if ( nd == endWord ) 
                  return  ct + 1 ; 
 
              for ( int  i = 0 ; i < nd . length ( ) ; i ++ ) 
              {    
                  char  tmp = nd [ i ] ; 
                  for ( char  zz = 'a' ; zz <= 'z' ; zz ++ ) 
                  { 
                     nd [ i ] = zz ; 
                      if ( st . count ( nd ) ) 
                      { 
                         q . push ( { nd , ct + 1 } ) ; 
                         st . erase ( nd ) ; 
                      } 
 
                  } 
                 nd [ i ] = tmp ; 
              } 
          } 
          return   0 ; 
      } 
 } ;