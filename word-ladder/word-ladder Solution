class   Solution   { 
 public : 
      int   ladderLength ( string beginWord ,  string endWord ,  vector < string > &  wordList )   { 
         
         unordered_set < string >   st ( wordList . begin ( ) , wordList . end ( ) ) ; 
 
          if ( beginWord == endWord  ||  st . count ( endWord ) == 0 ) 
              return   0 ; 
         
         queue < string >  q ; 
         q . push ( beginWord ) ; 
          int  steps = 1 ; 
          while ( ! q . empty ( ) ) 
          {    
              int  sz = q . size ( ) ; 
 
              while ( sz -- ) 
              { 
             string nd = q . front ( ) ; 
             q . pop ( ) ; 
         cout << nd << endl ; 
              for ( int  i = 0 ; i < nd . size ( ) ; i ++ ) 
              {    
                      char  tmp = nd [ i ] ; 
                      for ( char  zz = 'a' ; zz <= 'z' ; zz ++ ) 
                      { 
                             nd [ i ] = zz ; 
                          if ( st . count ( nd ) == 1 ) 
                          { 
                             q . push ( nd ) ; 
                             st . erase ( nd ) ; 
                          } 
 
                          if ( nd == endWord ) 
                              return  steps + 1 ; 
                         
                      } 
                     nd [ i ] = tmp ; 
              } 
              } 
             steps ++ ; 
          } 
          return   0 ; 
      } 
 } ;