class   Solution   { 
 public : 
     vector < vector < int >>   kSmallestPairs ( vector < int > &  nums1 ,  vector < int > &  nums2 ,   int  k )   {          
          int  n = nums1 . size ( ) ; 
          int  m = nums2 . size ( ) ; 
         vector < vector < int >>  res ; 
         set < pair < int , int >>  st ; 
         priority_queue < pair < int , pair < int , int >> >  pq ; 
 
         pq . push ( { - 1 * ( nums1 [ 0 ] + nums2 [ 0 ] ) , { 0 , 0 } } ) ; 
               st . insert ( { 0 , 0 } ) ; 
          int  z = 0 ; 
          while ( ! pq . empty ( )   &&  res . size ( ) < k ) 
          { 
              auto  nd = pq . top ( ) ; 
             pq . pop ( ) ; 
              int  val = nd . first ; 
              int  p1 = nd . second . first ; 
              int  p2 = nd . second . second ; 
 
       
 
                 res . push_back ( { nums1 [ p1 ] , nums2 [ p2 ] } ) ; 
            
              if ( p2 + 1 < m  ) 
              {    
                  if ( st . count ( { p1 , p2 + 1 } ) == 0 ) 
                  { 
                 pq . push ( { - 1 * ( nums1 [ p1 ] + nums2 [ p2 + 1 ] ) , { p1 , p2 + 1 } } ) ; 
                 st . insert ( { p1 , p2 + 1 } ) ; 
                  } 
              } 
 
              if ( p1 + 1 < n ) 
              {    
                  if ( st . count ( { p1 + 1 , p2 } ) == 0 ) 
                  { 
                 pq . push ( { - 1 * ( nums1 [ p1 + 1 ] + nums2 [ p2 ] ) , { p1 + 1 , p2 } } ) ; 
                 st . insert ( { p1 + 1 , p2 } ) ; 
                  } 
              } 
 
          } 
          return  res ; 
     
      } 
 } ;