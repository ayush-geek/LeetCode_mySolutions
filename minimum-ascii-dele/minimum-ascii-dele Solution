class   Solution   { 
 public : 
      int   minimumDeleteSum ( string s1 ,  string s2 )   { 
          //lcs 
 
          int  n = s1 . size ( ) ; 
          int  m = s2 . size ( ) ; 
 
          long   long  sum = 0 ; 
          for ( int  i = 0 ; i < s1 . size ( ) ; i ++ ) 
          { 
             sum += ( long   long ) ( s1 [ i ] ) ; 
          } 
          // cout<<sum<<endl; 
          for ( int  i = 0 ; i < s2 . size ( ) ; i ++ ) 
          { 
             sum += ( long   long ) ( s2 [ i ] ) ; 
          } 
          //   cout<<sum<<endl; 
 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( m + 1 , 0 ) ) ; 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
              for ( int  j = 1 ; j <= m ; j ++ ) 
              { 
                  if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) 
                     dp [ i ] [ j ] = s1 [ i - 1 ] + dp [ i - 1 ] [ j - 1 ] ; 
                  else 
                     dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; 
              } 
          } 
          // cout<<dp[n][m]<<endl; 
          // int i=n,j=m; 
          // string res=""; 
          // while(i>0 && j>0) 
          // {    
          //      //cout<<s1[i-1]<<" "<<s2[j-1]<<endl; 
          //     if(s1[i-1]==s2[j-1]) 
          //     { 
          //         res.push_back(s1[i-1]); 
          //         i--; 
          //         j--; 
          //     } 
          //     else if(dp[i-1][j]<dp[i][j-1]) 
          //     { 
          //         j--; 
          //     } 
          //     else if(dp[i-1][j]>dp[i][j-1]) 
          //     { 
          //         i--; 
          //     } 
          //     else  
          //     { 
          //         if(s1[i-1]>s2[j-1]) 
          //             j--; 
          //         else 
          //             i--; 
          //     } 
          // } 
 
          // long long tmp=0; 
          // for(int i=0;i<res.size();i++) 
          // { 
          //     tmp+=(long long)(res[i]); 
          // } 
          // cout<<res<<endl; 
          return  sum - 2 * dp [ n ] [ m ]   ; 
         
      } 
 } ;