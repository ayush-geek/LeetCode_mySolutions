class   Solution   { 
 public : 
 
      int   solve ( int  i  , int  j  , vector < vector < int >> &  dp , vector < int > &  days ,  vector < int > &  costs ) 
      { 
          if ( i >= days . size ( ) ) 
              return    0 ; 
         
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
         
          if ( j > days [ i ] ) 
                  return   solve ( i + 1 , j , dp , days , costs ) ; 
 
          return  dp [ i ] [ j ] = min ( 
          { 
         costs [ 0 ] + solve ( i + 1 , days [ i ] + 1 , dp , days , costs )   , 
         costs [ 1 ] + solve ( i + 1 , days [ i ] + 7 , dp , days , costs )  
          , costs [ 2 ]   + solve ( i + 1 , days [ i ] + 30 , dp , days , costs ) 
          } ) ; 
      } 
 
      int   mincostTickets ( vector < int > &  days ,  vector < int > &  costs )   { 
          //recusrion 
 
          int  n = days . size ( ) ; 
 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( 400 , - 1 ) ) ; 
 
          // dp[i][j] ->tell ki from i till which j 
 
          return   solve ( 0 , 0 , dp , days , costs ) ; 
      } 
 } ;