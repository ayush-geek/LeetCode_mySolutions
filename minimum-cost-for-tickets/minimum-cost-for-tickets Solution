class   Solution   { 
 public : 
 
      int   solve ( int  i , int  tot , vector < int > &  days , vector < int > &  costs , vector < int > &  dp ) 
      { 
          int  n = days . size ( ) ; 
         
          if ( i >= days . size ( ) ) 
              return    0 ; 
         
 
          if ( tot > days [ i ] ) 
              return   solve ( i + 1 , tot , days , costs , dp ) ; 
          if ( dp [ i ] != - 1 ) 
              return  dp [ i ] ; 
         
          int  ca = costs [ 0 ] + solve ( i + 1 , days [ i ] + 1 , days , costs , dp ) ; 
          int  cb = costs [ 1 ] + solve ( i + 1 , days [ i ] + 7 , days , costs , dp ) ; 
          int  cc = costs [ 2 ] + solve ( i + 1 , days [ i ] + 30 , days , costs , dp ) ; 
 
 
          //cout<<i<<" "<<tot<<endl; 
          return  dp [ i ] = min ( ca , min ( cb , cc ) ) ; 
      } 
 
 
      int   mincostTickets ( vector < int > &  days ,  vector < int > &  costs )   { 
         
          //recursion  
          int  n = days . size ( ) ; 
          int  tot = days [ 0 ] ; 
 
         vector < int >   dp ( n , - 1 ) ; 
          return   solve ( 0 , tot , days , costs , dp ) ; 
 
      } 
 } ;