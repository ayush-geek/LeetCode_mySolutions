class   Solution   { 
 public : 
      int   findTargetSumWays ( vector < int > &  A ,   int  target )   { 
           int  sm = accumulate ( A . begin ( ) , A . end ( ) , 0 ) ; 
         
          if ( ( sm + target ) % 2 != 0   || sm + target < 0 )  
              return   0 ; 
         
          int  tgt = ( sm + target ) / 2 ; 
 
         
           int  n = A . size ( ) ; 
           int  amount = tgt ; 
          
          
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( amount + 1 , 0 ) ) ; 
 
       dp [ 0 ] [ 0 ] = 1 ; 
 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
              for ( int  j = 0 ; j <= amount ; j ++ ) 
              { 
                  if ( A [ i - 1 ] <= j ) 
                     dp [ i ] [ j ] = dp [ i - 1 ] [ j - A [ i - 1 ] ] ; 
                 
                 dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j ] ) ; 
              } 
          } 
         
          return  dp [ n ] [ amount ] ; 
      } 
 } ;