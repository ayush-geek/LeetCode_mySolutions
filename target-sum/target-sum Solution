class   Solution   { 
 public : 
      int   findTargetSumWays ( vector < int > &  arr ,   int  target )   { 
         
             target = abs ( target ) ; 
           int  sm = accumulate ( arr . begin ( ) , arr . end ( ) , 0 ) ; 
 
           if ( ( sm + target ) % 2 != 0   ||  sm < target ) 
              return   false ; 
 
           int  sum = ( sm + target ) / 2 ; 
           int  n = arr . size ( ) ; 
 	    vector < vector < int >>   dp ( n + 1 , vector < int >    ( sum + 1 , 0 ) ) ; 
             
             // for(int i=0;i<=n;i++) 
                 dp [ 0 ] [ 0 ] = 1 ; 
                 
             
              for ( int  i = 1 ; i <= n ; i ++ ) 
              { 
                  for ( int  j = 0 ; j <= sum ; j ++ ) 
                  { 
                      if ( j >= arr [ i - 1 ] ) 
                         dp [ i ] [ j ] = dp [ i - 1 ] [ j - arr [ i - 1 ] ] ; 
                     
                     dp [ i ] [ j ] = ( dp [ i ] [ j ]   +  dp [ i - 1 ] [ j ] ) ; 
                  } 
              } 
 
          return  dp [ n ] [ sum ] ; 
      } 
 } ;