class   Solution   { 
 public : 
      int   largestArea (  vector < int > &  histo ) 
      { 
          int  n = histo . size ( ) ; 
 
         stack < int >  st ; 
         
          int  maxA = 0 ; 
          for ( int  i = 0 ; i <= histo . size ( ) ; i ++ ) 
          { 
             
              while ( ! st . empty ( )   &&   ( i == n  ||  histo [ st . top ( ) ] >= histo [ i ] ) ) 
              { 
                  int  ht = histo [ st . top ( ) ] ; 
                 st . pop ( ) ; 
                  int  width ; 
 
                  if ( st . empty ( ) ) 
                     width = i ; 
                  else 
                     width = i - st . top ( ) - 1 ; 
                 maxA = max ( maxA , ht * width ) ; 
              } 
             st . push ( i ) ; 
          } 
          return  maxA ; 
      } 
 
      int   maximalRectangle ( vector < vector < char >> &  matrix )   { 
          int  n = matrix . size ( ) ; 
          int  m = matrix [ 0 ] . size ( ) ; 
         vector < int >   hist ( m , 0 ) ; 
          int  maxa = 0 ; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( matrix [ i ] [ j ] == '1' ) 
                     hist [ j ] ++ ; 
                  else 
                     hist [ j ] = 0 ; 
              } 
 
              int  area = largestArea ( hist ) ; 
             maxa = max ( maxa , area ) ; 
          } 
          return  maxa ; 
      } 
 } ;