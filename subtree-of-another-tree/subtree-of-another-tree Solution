/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
  class   Solution   { 
  public : 
 
      bool   chk ( TreeNode *  rt1 , TreeNode *  rt2 ) 
      { 
          if ( rt1 == NULL   &&  rt2 == NULL ) 
              return   true ; 
          if ( rt1 == NULL   ||  rt2 == NULL ) 
              return   false ; 
         
          return   ( rt1 -> val == rt2 -> val )   &&   chk ( rt1 -> left , rt2 -> left ) &&   chk ( rt1 -> right , rt2 -> right ) ; 
      } 
 
      bool   isSubtree ( TreeNode *  root ,  TreeNode *  subRoot )   { 
         
          //Just do dfs 
 
          if ( root == NULL ) 
              return   false ; 
         
          if ( root -> val == subRoot -> val ) 
          { 
              if (   chk ( root , subRoot ) ) 
              return   true ; 
          } 
 
          return   isSubtree ( root -> left , subRoot )   ||   isSubtree ( root -> right , subRoot ) ; 
      } 
  } ;