class   Solution   { 
 public : 
 
 
      int   solve ( int  i , int  j , vector < int > &  cuts ,  vector < vector < int >> &  dp ) 
      { 
          if ( i > j ) 
              return   0 ; 
         
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
 
          int  mn = 1e9 ; 
 
          for ( int  ind = i ; ind <= j ; ind ++ ) 
          { 
              int  cos = cuts [ j + 1 ] - cuts [ i - 1 ] + solve ( i , ind - 1 , cuts , dp ) + solve ( ind + 1 , j , cuts , dp ) ; 
             mn = min ( mn , cos ) ; 
          } 
 
          return  dp [ i ] [ j ] = mn ; 
 
      } 
      int   minCost ( int  n ,  vector < int > &  cuts )   { 
         
 
          //memoization 
          int  c = cuts . size ( ) ; 
 
         cuts . push_back ( 0 ) ; 
         cuts . push_back ( n ) ; 
 
          sort ( cuts . begin ( ) , cuts . end ( ) ) ; 
 
         vector < vector < int >>   dp ( c + 2 , vector < int >   ( c + 2 , 0 ) ) ; 
 
          for ( int  i = c ; i >= 1 ; i -- ) 
          { 
              for ( int  j = i ; j <= c ; j ++ ) 
              { 
                    int  mn = 1e9 ; 
 
          for ( int  ind = i ; ind <= j ; ind ++ ) 
          {    
             
              int  cos = cuts [ j + 1 ] - cuts [ i - 1 ] + solve ( i , ind - 1 , cuts , dp ) + solve ( ind + 1 , j , cuts , dp ) ; 
             mn = min ( mn , cos ) ; 
          } 
 
         dp [ i ] [ j ] = mn ; 
              } 
          } 
 
          return  dp [ 1 ] [ c ] ; 
          //return solve(1,c,cuts,dp); 
 
 
      } 
 } ;