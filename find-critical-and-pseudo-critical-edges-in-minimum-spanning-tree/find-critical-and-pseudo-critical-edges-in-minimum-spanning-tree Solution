class   DSU { 
 
      public : 
     vector < int >  parent , size ; 
 
      DSU ( int  n ) { 
         parent . resize ( n + 1 , 0 ) ; 
         size . resize ( n + 1 , 0 ) ; 
 
          iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
      } 
 
      int   findUpar ( int  nd ) 
      { 
          if ( parent [ nd ] == nd ) 
              return  nd ; 
         
          return  parent [ nd ] = findUpar ( parent [ nd ] ) ; 
      } 
 
      bool   unionBySize ( int  u , int  v ) 
      { 
          int  pa = findUpar ( u ) ; 
          int  pb = findUpar ( v ) ; 
 
          if ( pa == pb ) 
              return   false ; 
 
          if ( size [ pa ] < size [ pb ] ) 
          { 
             size [ pb ] += size [ pa ] ; 
             parent [ pa ] = parent [ pb ] ; 
          } 
          else 
          { 
               size [ pa ] += size [ pb ] ; 
             parent [ pb ] = parent [ pa ] ; 
          } 
 
          return   true ; 
      } 
     
 } ; 
 
 class   Solution   { 
 private : 
 
      int   findMST ( int  n ,  vector < vector < int >> &  edges  , int  block , int  incl ) 
 { 
     DSU  ds ( n ) ; 
      int  cost = 0 ; 
      if ( incl != - 1 ) 
      { 
         ds . unionBySize ( edges [ incl ] [ 0 ] , edges [ incl ] [ 1 ] ) ; 
         cost += edges [ incl ] [ 2 ] ; 
      } 
 
      for ( int  i = 0 ; i < edges . size ( ) ; i ++ ) 
         { 
 
             if ( i == block ) 
              continue ;   //not take 
 
              if ( ds . unionBySize ( edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) ) 
              { 
                 cost += edges [ i ] [ 2 ] ; 
              } 
         } 
          int  ct = 0 ; 
 
         for ( int  i = 0 ; i < n ; i ++ ) 
         { 
             if ( ds . findUpar ( i ) == i ) 
             ct ++ ; 
         } 
 
         if ( ct > 1 ) 
          return  INT_MAX ; 
 
         return  cost ; 
 } 
 
 public : 
     vector < vector < int >>   findCriticalAndPseudoCriticalEdges ( int  n ,  vector < vector <    int >> &  edges )   { 
      
     vector < int >  cr ; 
     vector < int >  pc ; 
        for ( int  i = 0 ; i < edges . size ( ) ; i ++ ) 
             edges [ i ] . push_back ( i ) ;  
       sort ( edges . begin ( )   ,  edges . end ( )   , [ ] ( const  vector < int > &  a , const  vector < int > &  b ) { 
           return  a [ 2 ] < b [ 2 ] ; 
       } ) ; 
         int  org = findMST ( n , edges , - 1 , - 1 ) ; 
 
         for ( int  i = 0 ; i < edges . size ( ) ; i ++ ) 
         { 
             if ( org < findMST ( n , edges , i , - 1 ) ) 
             cr . push_back ( edges [ i ] [ 3 ] ) ; 
          else   if ( org == findMST ( n , edges , - 1 , i ) ) 
             pc . push_back ( edges [ i ] [ 3 ] ) ; 
         } 
 
      return { cr , pc } ; 
 
      } 
 } ;