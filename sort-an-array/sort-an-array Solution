class   Solution   { 
 public : 
 
      void   merge ( vector < int > &  nums , int  l , int  mid , int  r ) 
      { 
          int  left = l ; 
          int  right = mid + 1 ; 
         vector < int >  tmp ; 
          while ( left <= mid  &&  right <= r ) 
          { 
              if ( nums [ left ] <= nums [ right ] ) 
                  { 
                     tmp . push_back ( nums [ left ] ) ; 
                     left ++ ; 
                  } 
              else { 
                  tmp . push_back ( nums [ right ] ) ; 
                     right ++ ; 
              } 
          } 
 
 
          while ( left <= mid ) 
          { 
             tmp . push_back ( nums [ left ] ) ; 
                     left ++ ; 
          } 
 
 
          while ( right <= r ) 
          { 
             tmp . push_back ( nums [ right ] ) ; 
                     right ++ ; 
          } 
 
 
          for ( int  i = l ; i <= r ; i ++ ) 
          { 
             nums [ i ] = tmp [ i - l ] ; 
          } 
 
      } 
 
      void   mergesort ( vector < int > &  nums , int  l , int  r ) 
      { 
          if ( l >= r ) 
              return   ; 
          int  mid = ( l + r ) / 2 ; 
          mergesort ( nums , l , mid ) ; 
          mergesort ( nums , mid + 1 , r ) ; 
 
 
          merge ( nums , l , mid , r ) ; 
 
      } 
     vector < int >   sortArray ( vector < int > &  nums )   { 
         
          //solve using merge sort 
          int  n = nums . size ( ) ; 
          mergesort ( nums , 0 , n - 1 ) ; 
          return  nums ; 
      } 
 } ;