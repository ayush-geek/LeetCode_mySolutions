class   Solution   { 
 public : 
      int   findShortestCycle ( int  n ,  vector < vector < int >> &  edges )   { 
         
         vector < int >  adj [ n ] ; 
 
          for ( int  i = 0 ; i < edges . size ( ) ; i ++ ) 
          { 
             adj [ edges [ i ] [ 0 ] ] . push_back ( edges [ i ] [ 1 ] ) ; 
             adj [ edges [ i ] [ 1 ] ] . push_back ( edges [ i ] [ 0 ] ) ; 
          } 
 
         queue < int >  q ; 
          int  ans = 1e9 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             vector < int >   par ( n , - 1 ) ; 
             vector < int >   dis ( n , 1e9 ) ; 
             q . push ( i ) ; 
             dis [ i ] = 0 ; 
 
 
              while ( ! q . empty ( ) ) 
              { 
                  int  nd = q . front ( ) ; 
                 q . pop ( ) ; 
 
                  for ( auto & ele :  adj [ nd ] ) 
                  { 
                      if ( dis [ ele ] == 1e9 ) 
                      { 
                        dis [ ele ] = 1 + dis [ nd ] ; 
                        par [ ele ] = nd ; 
                        q . push ( ele ) ; 
                      } 
                      else   if ( par [ nd ] != ele ) 
                      {    
                         
                         ans = min ( ans , dis [ ele ] + dis [ nd ] + 1 ) ; 
                      } 
                  } 
              } 
          } 
          if ( ans == 1e9 ) 
              return   - 1 ; 
          return  ans ; 
      } 
 } ;