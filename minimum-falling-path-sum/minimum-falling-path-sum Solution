class   Solution   { 
 public : 
      int   minFallingPathSum ( vector < vector < int >> &  matrix )   { 
          int  n = matrix . size ( ) ; 
          int  m = matrix [ 0 ] . size ( ) ; 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( m + 2 , 1e9 ) ) ; 
 
          //start from down 
          int  ans = 1e9 ; 
          for ( int  i = n - 1 ; i >= 0 ; i -- ) 
          { 
              for ( int  j = 1 ; j <= m ; j ++   ) 
              { 
                  if ( i == n - 1 ) 
                     dp [ i ] [ j ] = matrix [ i ] [ j - 1 ] ; 
                  else 
                  { 
                     dp [ i ] [ j ] = matrix [ i ] [ j - 1 ] + min ( { 
                             dp [ i + 1 ] [ j - 1 ] , dp [ i + 1 ] [ j ] , dp [ i + 1 ] [ j + 1 ] 
                      } ) ; 
                  } 
 
                  if ( i == 0 ) 
                     ans = min ( ans , dp [ i ] [ j ] ) ; 
 
                    //  cout<<dp[i][j]<<" "; 
              } 
             // cout<<endl; 
          } 
          return  ans ; 
         
      } 
 } ;