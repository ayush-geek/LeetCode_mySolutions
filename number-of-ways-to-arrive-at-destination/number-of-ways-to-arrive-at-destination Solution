class   Solution   { 
 public : 
      int  mod = 1e9 + 7 ; 
      int   countPaths ( int  n ,  vector < vector < int >> &  roads )   { 
         
         vector < pair < int , long   long >>  adj [ n ] ; 
 
          for ( auto &  ele :  roads ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( { ele [ 1 ] , ele [ 2 ] } ) ; 
              adj [ ele [ 1 ] ] . push_back ( { ele [ 0 ] , ele [ 2 ] } ) ; 
          } 
 
         vector < long   long >   dis ( n , LONG_MAX ) ; 
         vector < int >   ct ( n , 0 ) ; 
         dis [ 0 ] = 0 ; 
         ct [ 0 ] = 1 ; 
         priority_queue < pair < long   long , int >>  pq ; 
         pq . push ( { 0 , 0 } ) ; 
 
          while ( ! pq . empty ( ) ) 
          { 
              auto  nd = pq . top ( ) ; 
             pq . pop ( ) ; 
 
              long   long  d = abs ( nd . first ) ; 
              int  node = nd . second ; 
          //cout<<node<<endl; 
              for ( auto &  ele :  adj [ node ] ) 
              { 
                  int  e = ele . first ; 
                  long   long  w = 1ll * ele . second ; 
 
 
                  if ( d + w < dis [ e ] ) 
                  { 
                     pq . push ( { - 1 * ( d + w ) , e } ) ; 
                     dis [ e ] = d + w ; 
                      //  ct[e]=1; 
                     ct [ e ] = ct [ node ] ; 
                  } 
                  else   if ( d + w == dis [ e ] ) 
                  {    
                      //cout<<e<<" "<<dis[e]<<endl; 
                     ct [ e ] = ( ct [ e ] + ct [ node ] ) % mod ; 
                  } 
              } 
          } 
 
          return  ct [ n - 1 ] ; 
      } 
 } ;