/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 /**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
 
     TreeNode *   solve ( int  i , int  j , vector < int > &  v ) 
      { 
          if ( i > j ) 
              return   NULL ; 
         
          int  mid = ( i + j ) / 2 ; 
 
         TreeNode *  nd = new   TreeNode ( v [ mid ] ) ; 
         nd -> left = solve ( i , mid - 1 , v ) ; 
         nd -> right = solve ( mid + 1 , j , v ) ; 
          return  nd ; 
      } 
 
     TreeNode *   sortedListToBST ( ListNode *  head )   { 
         
 
          //divide and conquer 
 
         vector < int >  v ; 
          while ( head != NULL ) 
          { 
             v . push_back ( head -> val ) ; 
             head = head -> next ; 
          } 
          return   solve ( 0 , v . size ( ) - 1 , v ) ; 
      } 
 } ;