class   Solution   { 
 public : 
 
      int   solve ( string str1 ,  string str2 )  
 	 {  
 	     // Your code goes here 
 	    
 	     int  n1 = str1 . size ( ) ; 
 	     int  n2 = str2 . size ( ) ; 
 	    
 	    
 	    vector < vector < int >>   dp ( n1 + 1 , vector < int >   ( n2 + 1 , 0 ) ) ; 
 	    
 	     int  ans = 0 ; 
 	     for ( int  i = 1 ; i <= n1 ; i ++ ) 
 	     { 
 	         for ( int  j = 1 ; j <= n2 ; j ++ ) 
 	         { 
 	             if ( str1 [ i - 1 ] == str2 [ j - 1 ]   ) 
 	                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; 
 	            else 
 	           dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; 
 	           
 	           ans = max ( ans , dp [ i ] [ j ] ) ; 
 	         } 
 	     } 
 	    
 	     return  ans ; 
 	    
 	    
 	 }  
      bool   isSubsequence ( string s ,  string t )   { 
          int  z = solve ( s , t ) ; 
         cout << z << endl ; 
          if ( s . size ( ) == z ) 
              return   true ; 
          else 
              return   false ; 
      } 
 } ;