class   Solution   { 
 public : 
      int   snakesAndLadders ( vector < vector < int >> &  board )   { 
         
          int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
 
         queue < int >  q ; 
         q . push ( 1 ) ; 
         vis [ n - 1 ] [ 0 ] = 1 ; 
          int  ans = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              int  sz = q . size ( ) ; 
 
              while ( sz -- ) 
              { 
                  int  cur = q . front ( ) ; 
                 q . pop ( ) ; 
 
                  if ( cur == n * n ) 
                      return  ans ; 
                 
                  for ( int  i = 1 ; i <= 6 ; i ++ ) 
                  { 
                     
                      int  nxt = cur + i ; 
                      if ( nxt > n * n ) 
                          break ; 
                     
                      int  r = n -   ( nxt - 1 ) / n - 1 ; 
                      int  c = ( nxt - 1 ) % n ; 
                      if ( r % 2   ==  n % 2 )       
                         c  =  n - c - 1 ; 
                      if ( ! vis [ r ] [ c ] ) 
                      { 
                         vis [ r ] [ c ] = 1 ; 
                          if ( board [ r ] [ c ] != - 1 ) 
                             q . push ( board [ r ] [ c ] ) ;   
                          else 
                             q . push ( nxt ) ; 
                      } 
                  } 
 
             
              } 
             ans ++ ; 
          } 
     
          return   - 1 ; 
      } 
 } ;