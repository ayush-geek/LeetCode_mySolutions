class   Solution   { 
 public : 
 
        int   solve ( int  i , int  j , int  k , vector < int > &  prices , vector < vector < vector < int >> > &  dp ) 
      { 
 
          if ( i == prices . size ( )   ||  k == 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] [ k ] != - 1 ) 
              return  dp [ i ] [ j ] [ k ] ; 
 
          int  ans = 0 ; 
          if ( j == 1 ) 
          { 
             ans = max ( prices [ i ] + solve ( i + 1 , 0 , k - 1 , prices , dp )   , solve ( i + 1 , 1 , k , prices , dp ) ) ; 
          } 
           if ( j == 0 ) 
           { 
              ans = max ( - prices [ i ] + solve ( i + 1 , 1 , k , prices , dp ) , solve ( i + 1 , 0 , k , prices , dp ) ) ; 
           } 
 
          return  dp [ i ] [ j ] [ k ] = ans ; 
      } 
 
 
      int   maxProfit ( int  k ,  vector < int > &  prices )   { 
         
           //3d  
 
            int  n = prices . size ( ) ; 
 
         vector < vector < vector < int >> >   dp ( n , vector < vector < int >>   ( 2 , vector < int >   ( k + 1 , - 1 ) ) ) ; 
 
          return   solve ( 0 , 0 , k , prices , dp ) ; 
      } 
 } ;