class   Solution   { 
 public : 
     
     
      int   solve ( int  i  , int  b , int  k , vector < int > &  prices ,  vector < vector < vector < int >> > &  dp ) 
      { 
         
         
          if ( k == 0   || i == prices . size ( ) ) 
              return   0 ; 
         
         
         
         
          if ( dp [ i ] [ b ] [ k ] != - 1 ) 
              return  dp [ i ] [ b ] [ k ] ; 
         
         
          //take it 
          if ( b ) 
          { 
              return  dp [ i ] [ b ] [ k ] =   max ( - prices [ i ] + solve ( i + 1 , 0 , k , prices , dp ) , solve ( i + 1 , 1 , k , prices , dp ) ) ; 
          } 
         
          else 
          { 
              return   dp [ i ] [ b ] [ k ] =    max ( prices [ i ] + solve ( i + 1 , 1 , k - 1 , prices , dp ) , solve ( i + 1 , 0 , k , prices , dp ) ) ; 
          } 
         
      } 
     
     
      int   maxProfit ( int  k ,  vector < int > &  prices )   { 
         
         
          //3 d dp 
          int  n = prices . size ( ) ; 
         
         vector < vector < vector < int >> >   dp ( n + 1 , vector < vector < int >>   ( 2 , vector < int >   ( k + 1 , - 1 ) ) ) ; 
         
         
         
          return   solve ( 0 , 1 , k , prices , dp ) ; 
      } 
 } ;