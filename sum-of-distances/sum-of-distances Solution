class   Solution   { 
 public : 
     vector < long   long >   distance ( vector < int > &  nums )   { 
          int  n = nums . size ( ) ; 
         unordered_map < int , vector < int >>  mp ; 
         
          for ( int  i = 0 ; i < nums . size ( ) ; i ++ ) 
          { 
             mp [ nums [ i ] ] . push_back ( i ) ; 
          } 
         
           unordered_map < int , vector < long   long >>  mp2 ; 
          for ( auto &  ele :  mp ) 
          { 
              for ( int  i = 0 ; i < mp [ ele . first ] . size ( ) ; i ++ ) 
              {        
                  long   long  tm = 0 ; 
                  if ( i != 0 ) 
                     tm += ( long   long ) mp2 [ ele . first ] . back ( )   ; 
                 
                 tm += ( long   long ) mp [ ele . first ] [ i ] ; 
                 
                 mp2 [ ele . first ] . push_back ( tm ) ; 
              } 
          } 
         
         vector < long   long >   arr ( n , 0 ) ; 
         
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              long   long  ans = 0 ; 
              //long long sm=accumulate(mp[nums[i]].begin(),mp[nums[i]].end(),0ll); 
             
              long   long  lb = lower_bound ( mp [ nums [ i ] ] . begin ( ) , mp [ nums [ i ] ] . end ( ) , i ) - mp [ nums [ i ] ] . begin ( ) ; 
              //long long sm1=accumulate(mp[nums[i]].begin(),mp[nums[i]].begin()+lb+1,0ll);; 
           
                
              int  zz = mp [ nums [ i ] ] . size ( ) ; 
              long   long  sm1 = mp2 [ nums [ i ] ] [ lb ] ; 
              long   long  sm = mp2 [ nums [ i ] ] [ zz - 1 ] - sm1 ; 
             
             ans = ( long   long ) ( lb + 1 ) * i * 1ll   - ( long   long )  sm1   + ( long   long ) ( sm )   - ( long   long ) ( zz - lb - 1 ) * i * 1ll ; 
              //cout<<lb<<" "<<nums[i]<<" "<<sm1<<" "<<sm<<" "<<zz<<" "<<ans<<endl;  
             arr [ i ] = ans ; 
          } 
          return  arr ; 
      } 
 } ; 
 
 // [2,5,5,0,3,2,2,7,5,5,5] 
 // [11,25,22,0,0,6,7,0,16,17,20]