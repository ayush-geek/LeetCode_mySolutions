class   Solution   { 
 public : 
 
      void   solve ( int  i , vector < int > &  candidates , int  target , vector < int >  tmp , vector < vector < int >> &  res ) 
      {    
          if ( target == 0 ) 
              { 
                 res . push_back ( tmp ) ; 
                  return   ; 
              } 
          for ( int  j = i ; j < candidates . size ( ) ; j ++ ) 
          { 
              if ( j != i  &&  candidates [ j ] == candidates [ j - 1 ] ) 
                  continue ; 
             
              if ( j > target ) 
                  break ; 
             
             tmp . push_back ( candidates [ j ] ) ; 
              solve ( j , candidates , target - candidates [ j ] , tmp , res ) ; 
             tmp . pop_back ( ) ; 
          } 
      } 
 
     vector < vector < int >>   combinationSum ( vector < int > &  candidates ,   int  target )   { 
          sort ( candidates . begin ( ) , candidates . end ( ) ) ; 
          int  n = candidates . size ( ) ; 
 
         vector < vector < int >>  res ; 
         vector < int >  tmp ; 
          solve ( 0 , candidates , target , tmp , res ) ; 
 
          return  res ; 
      } 
 } ;