/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 class   Solution   { 
 public : 
 
      int   size ( ListNode *  head ) 
      { 
          int  sz = 0 ; 
          while ( head != NULL ) 
          { 
             head = head -> next ; 
             sz ++ ; 
          } 
          return  sz ; 
      } 
 
     ListNode *   solve ( ListNode *  head , int  k , int  sz ) 
      {    
 
 
         ListNode *  prev = NULL ; 
         ListNode *  tt = head ; 
          int  z = k ; 
         
          if ( sz < k ) 
              return  tt ; 
        
          while ( head != NULL   &&  k > 0   ) 
          { 
             ListNode *  tmp = head -> next ; 
             head -> next = prev ; 
             prev = head ; 
             head = tmp ; 
              k -- ; 
          } 
 
              // cout<<sz-k<<endl; 
         
          tt -> next = solve ( head , z , sz - z ) ; 
 
           return  prev ; 
      } 
 
 
 
     ListNode *   reverseKGroup ( ListNode *  head ,   int  k )   { 
         
 
          //O(1) spce 
          // ListNode* tmp=head; 
          // ListNode* nh=NULL; 
 
          // int fg=0; 
          // int z=0; 
          // while(tmp!=NULL) 
          // {   cout<<z<<endl; 
          //     if(fg==0) 
          //     { 
          //         nh=reverse(tmp,k); 
          //         head=nh; 
                
          //         fg=1; 
          //     } 
          //     // else if(z==k-1) 
          //     // {    
                 
          //     //     nh->next=reverse(tmp,k); 
          //     // } 
          //      cout<<tmp->val<<endl; 
          //         //nh=nh->next; 
          //         tmp=tmp->next; 
          //     z++; 
          //    // z=z%k; 
          // } 
          int  sz = size ( head ) ; 
          return   solve ( head , k , sz ) ; 
      } 
 } ;