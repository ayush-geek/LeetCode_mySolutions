class   Solution   { 
 public : 
 int   solve ( int  i , int  j , vector < int > &  prices , vector < vector < int >> &  dp , int  fee ) 
 { 
      if ( i >= prices . size ( ) ) 
          return   0 ; 
 
     
      if ( dp [ i ] [ j ] != - 1 ) 
          return  dp [ i ] [ j ] ; 
 
      if ( j == 0 ) 
      { 
     dp [ i ] [ 0 ] = max ( - prices [ i ] + solve ( i + 1 , 1 , prices , dp , fee ) , solve ( i + 1 , 0 , prices , dp , fee ) ) ; 
      } 
 
      if ( j == 1 ) 
      { 
     dp [ i ] [ 1 ] = max ( prices [ i ] - fee + solve ( i + 1 , 0 , prices , dp , fee ) , solve ( i + 1 , 1 , prices , dp , fee ) ) ; 
      } 
 
      return  dp [ i ] [ j ] ; 
 
 } 
 
      int   maxProfit ( vector < int > &  prices ,   int  fee )   { 
          int  n = prices . size ( ) ; 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( 2 , - 0 ) ) ; 
 
          for ( int  i = n - 1 ; i >= 0 ; i -- ) 
              { 
                 dp [ i ] [ 0 ] = max ( - prices [ i ]   +  dp [ i + 1 ] [ 1 ] , dp [ i + 1 ] [ 0 ] ) ; 
                 dp [ i ] [ 1 ] = max ( prices [ i ] - fee + dp [ i + 1 ] [ 0 ] , dp [ i + 1 ] [ 1 ] ) ; 
              } 
          return  dp [ 0 ] [ 0 ] ; 
      } 
 } ;