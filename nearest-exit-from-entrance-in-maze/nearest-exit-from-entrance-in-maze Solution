class   Solution   { 
 public : 
      int   nearestExit ( vector < vector < char >> &  maze ,  vector < int > &  entrance )   { 
         
 
          int  n = maze . size ( ) ; 
          int  m = maze [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
 
          int  sr = entrance [ 0 ] ; 
          int  sc = entrance [ 1 ] ; 
         
      int  ans = 1e9 ; 
         queue < pair < pair < int , int > , int >>  q ; 
 
         q . push ( { { sr , sc } , 0 } ) ; 
         vis [ sr ] [ sc ] = 1 ; 
 
          int  d = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
            
              int  r = q . front ( ) . first . first ; 
              int  c = q . front ( ) . first . second ; 
              int  d = q . front ( ) . second ; 
 
             q . pop ( ) ; 
              int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
              int  dc [ ] = { 0 , 1 , 0 , - 1 } ; 
 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  int  nr = r + dr [ i ] ; 
                  int  nc = c + dc [ i ] ; 
 
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&  maze [ nr ] [ nc ] == '.'   &&   ! vis [ nr ] [ nc ] ) 
                  { 
                      //cout<<nr<<" "<<nc<<endl; 
                     q . push ( { { nr , nc } , d + 1 } ) ; 
                     vis [ nr ] [ nc ] = 1 ; 
 
                      if ( nr == 0   ||  nc == 0   ||  nr == n - 1   ||  nc == m - 1 ) 
                         ans = min ( ans , d + 1 ) ; 
                             
                     
                  } 
 
                 
              } 
 
          } 
 
          if ( ans == 1e9 ) 
              return   - 1 ; 
          return  ans ; 
 
      } 
 } ;