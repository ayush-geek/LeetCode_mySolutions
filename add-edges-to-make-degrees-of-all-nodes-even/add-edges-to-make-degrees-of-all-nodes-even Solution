class   Solution   { 
 public : 
      bool   isPossible ( int  n ,  vector < vector < int >> &  edges )   { 
         
         
          //2  at most 
         
         vector < int >  res ; 
         
          // vector<vector<int>> adj[n]; 
         unordered_set < int >  adj [ n + 1 ] ; 
         
          for ( int  i = 0 ; i < edges . size ( ) ; i ++ ) 
          { 
             adj [ edges [ i ] [ 0 ] ] . insert ( edges [ i ] [ 1 ] ) ; 
             adj [ edges [ i ] [ 1 ] ] . insert ( edges [ i ] [ 0 ] ) ; 
 
          } 
         
        
     
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
              if ( adj [ i ] . size ( ) % 2 != 0 )    //DiscOntinuity 
              {  
                 
                 res . push_back ( i ) ; 
                 
              
              } 
             
           
          } 
         
          if ( res . size ( ) == 0 ) 
              return   true ; 
         
         
         
          if ( res . size ( ) == 2 ) 
          { 
              int  a = res [ 0 ] ; 
              int  b = res [ 1 ] ; 
             
              if ( adj [ res [ 0 ] ] . find ( res [ 1 ] ) == adj [ res [ 0 ] ] . end ( ) ) 
                              return   true ; 
             
              for ( int  i = 1 ; i <= n ; i ++ ) 
                      { 
                          if ( i == a   ||  i == b ) 
                              continue ; 
                           if ( adj [ i ] . find ( res [ 0 ] ) == adj [ i ] . end ( )    &&  adj [ i ] . find ( res [ 1 ] ) == adj [ i ] . end ( )   ) 
                                  return   true ; 
                      } 
             
             
              return   false ; 
             
             
          } 
         
          if ( res . size ( ) == 4 ) 
          { 
              int  a = res [ 0 ] ; 
              int  b = res [ 1 ] ; 
              int  c = res [ 2 ] ; 
              int  d = res [ 3 ] ; 
             
               if ( adj [ a ] . find ( b ) == adj [ a ] . end ( )   &&   adj [ d ] . find ( c ) == adj [ d ] . end ( ) ) 
                              return   true ; 
                if ( adj [ a ] . find ( c ) == adj [ a ] . end ( )   &&   adj [ d ] . find ( b ) == adj [ d ] . end ( ) ) 
                              return   true ; 
                if ( adj [ a ] . find ( d ) == adj [ a ] . end ( )   &&   adj [ b ] . find ( c ) == adj [ b ] . end ( ) ) 
                              return   true ; 
             
          } 
         
         
         
     
                 
              return   false ; 
         
         
      } 
 } ;