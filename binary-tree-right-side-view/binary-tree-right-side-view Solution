/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
     vector < int >   rightSideView ( TreeNode *  root )   { 
         
         vector < int >  res ; 
          queue < TreeNode * >  q ; 
          if ( root == NULL ) 
              return  res ; 
         q . push ( root ) ; 
          int  fg = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              int  sz = q . size ( ) ; 
                  //vector<int> tmp; 
              for ( int  i = 0 ; i < sz ; i ++ ) 
              {    
                 TreeNode *  node = q . front ( ) ; 
                 q . pop ( ) ; 
                  if ( node -> left != NULL ) 
                     q . push ( node -> left ) ; 
                 
                  if ( node -> right != NULL ) 
                     q . push ( node -> right ) ; 
 
                 if ( i == sz - 1 ) 
                     res . push_back ( node -> val ) ; 
              } 
 
              // if(fg==1) 
              // { 
              //     reverse(tmp.begin(),tmp.end()); 
              // } 
              // res.push_back(tmp); 
              //fg=1-fg; 
          } 
          return  res ; 
      } 
 } ;