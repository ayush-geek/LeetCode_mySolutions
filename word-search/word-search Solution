class   Solution   { 
  public : 
     
     
      bool   dfs ( int  i , int  j , vector < vector < char >> &  board ,  string word , int  k ) 
      { 
        int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
         
          if ( k >= word . size ( ) ) 
              return   true ; 
         
          if ( i < 0   ||  i >= n  ||  j < 0   ||  j >= m  ||  board [ i ] [ j ] != word [ k ] ) 
              return   false ; 
         
          char  tmp = board [ i ] [ j ] ; 
         board [ i ] [ j ] = '.' ; 
         
       
        bool  ans =    dfs ( i + 1 , j , board , word , k + 1 ) || 
          dfs ( i , j + 1 , board , word , k + 1 ) || 
          dfs ( i - 1 , j , board , word , k + 1 ) || 
          dfs ( i , j - 1 , board , word , k + 1 ) ; 
         
         
         board [ i ] [ j ] = tmp ; 
          return  ans ; 
         
         
      } 
     
     
      bool   exist ( vector < vector < char >> &  board ,  string word )   { 
         
         
          //DFS 
         
         
          int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
         
         
         vector < vector < int >>   vis ( n , vector < int >   ( m , - 1 ) ) ; 
         
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              {     int  k = 0 ; 
                  if ( board [ i ] [ j ] == word [ k ] ) 
                  { 
                      if ( dfs ( i , j , board , word , k ) ) 
                          return   true ; 
                  } 
              } 
          } 
         
         
          return   false ; 
      } 
  } ;