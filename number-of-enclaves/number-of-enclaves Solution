class   Solution   { 
 public : 
 
      void   dfs ( int  i , int  j , vector < vector < int >> &  vis , vector < vector < int >> &  grid ) 
      { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
          if ( i < 0   ||  i >= n  ||  j < 0   ||  j >= m  ||  vis [ i ] [ j ]   ||  grid [ i ] [ j ] == 0 ) 
              return   ; 
         vis [ i ] [ j ] = 1 ; 
          dfs ( i - 1 , j , vis , grid ) ; 
          dfs ( i , j - 1 , vis , grid ) ; 
          dfs ( i + 1 , j , vis , grid ) ; 
          dfs ( i , j + 1 , vis , grid ) ; 
      } 
 
      int   numEnclaves ( vector < vector < int >> &  grid )   { 
         
          //1- land 
          //0- water 
 
    int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          // for(int i=0;i<n;i++) 
          // { 
          //     if(grid[i][0]==1) 
          //         dfs(i,0,vis,grid); 
          //     if(grid[i][m-1]==1) 
          //         dfs(i,m-1,vis,grid); 
          // } 
          int  ans = 0 ; 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == 1   &&   ! vis [ i ] [ j ] ) 
                  { 
                      if ( i == 0   ||  i == n - 1   ||  j == 0   ||  j == m - 1 ) 
                          dfs ( i , j , vis , grid ) ; 
                     
                  } 
              } 
          } 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == 1   &&   ! vis [ i ] [ j ] ) 
                  { 
                   ans ++ ; 
                     
                  } 
              } 
          } 
 
          return  ans ; 
      } 
 } ;