/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
 
      int   solve ( TreeNode *  rt , bool  parent ,  unordered_map < TreeNode * , unordered_map < bool , int >> &  dp ) 
      { 
          if ( rt == NULL ) 
              return   0 ; 
 
          if ( dp . count ( rt )   &&  dp [ rt ] . count ( parent ) ) 
              return  dp [ rt ] [ parent ] ; 
         
          if ( parent ) 
              return  dp [ rt ] [ parent ] = solve ( rt -> left , false , dp ) + solve ( rt -> right , false , dp ) ; 
         
 
      return  dp [ rt ] [ parent ] = max ( { solve ( rt -> left , false , dp ) + solve ( rt -> right , false , dp ) ,   solve ( rt -> left , true , dp ) + 
      solve ( rt -> right , true , dp )   + rt -> val } ) ; 
      } 
 
      int   rob ( TreeNode *  root )   { 
       unordered_map < TreeNode * , unordered_map < bool , int >>  dp ; 
          return   solve ( root , false , dp ) ; 
      } 
 } ;