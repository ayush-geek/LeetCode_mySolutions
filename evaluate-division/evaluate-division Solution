class   Solution   { 
 public : 
     vector < double >   calcEquation ( vector < vector < string >> &  equations ,  vector < double > &  values ,  vector < vector < string >> &  queries )   { 
         
 
       map < string , unordered_map < string  , double >>  mp ; 
 
       vector < double >  ans ; 
 
        for ( int  i = 0 ; i < values . size ( ) ; i ++ ) 
        { 
           string a = equations [ i ] [ 0 ] ; 
           string b = equations [ i ] [ 1 ] ; 
            double  v = values [ i ] ; 
 
           mp [ a ] [ b ] = v ; 
           mp [ b ] [ a ] = 1 / v ; 
        } 
 
        for ( auto &  ele :  queries ) 
        {  
           string a = ele [ 0 ] ; 
           string b = ele [ 1 ] ; 
 
            if ( a == b  &&  mp . find ( a ) != mp . end ( ) ) { 
             ans . push_back ( 1 ) ; 
              continue ; 
              } 
 
          else   if ( mp [ a ] . find ( b ) != mp [ a ] . end ( ) ) 
          { 
             ans . push_back ( mp [ a ] [ b ] ) ; 
              continue ; 
          } 
          else   if (  mp . find ( a ) == mp . end ( )   ||  mp . find ( b ) == mp . end ( ) ) 
              { 
                  //cout<<a<<" "<<b<<endl; 
                 ans . push_back ( - 1 ) ; 
                  continue ; 
              } 
         
 
            double  res = 1 ; 
            int  fg = 0 ;   
 
             queue < pair < string  , double >>  q ; 
             q . push ( { a , 1 } ) ; 
             unordered_set < string >  st ; 
             st . insert ( a ) ; 
              while ( ! q . empty ( ) ) 
              {    
                 string nd = q . front ( ) . first ; 
                  double  val = q . front ( ) . second ; 
                 q . pop ( ) ; 
 
                  for ( auto &  ele :  mp [ nd ] ) 
                  {    
                      if ( st . count ( ele . first ) == 0 ) 
 
                      { 
                     q . push ( { ele . first , val * ele . second } ) ; 
 
                      if ( ele . first == b ) 
                          { 
                             fg = 1 ; 
                             res = val * ele . second ; 
                              break ; 
                          } 
                      } 
                     st . insert ( ele . first ) ; 
                  } 
 
                  if ( fg == 1 ) 
                      break ; 
              }  
 
         // cout<<"fg"<<" "<<a<<" "<<b<<res<<endl; 
              if ( fg == 1 ) 
                 ans . push_back ( res ) ; 
              else 
             ans . push_back ( - 1 ) ; 
 
        } 
      return  ans ; 
 
      } 
 } ;