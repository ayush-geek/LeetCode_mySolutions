class   Solution   { 
 public : 
 
      int   solve ( int  i , int  k , vector < vector < int >> &  piles , vector < vector < int >> &  dp ) 
      { 
          if ( i >= piles . size ( ) ) 
              return   0 ; 
         
          if ( dp [ i ] [ k ] != - 1 ) 
              return  dp [ i ] [ k ] ; 
 
          int  maxa = 0 ; 
 
 
          //not pick 
         maxa = max ( maxa , solve ( i + 1 , k , piles , dp ) ) ; 
 
          //pick 
          for ( int  j = 0 ; j < piles [ i ] . size ( ) ; j ++ ) 
          {    
              if ( j + 1 <= k ) 
             maxa = max ( maxa , piles [ i ] [ j ]   + solve ( i + 1 , k - j - 1 , piles , dp ) ) ; 
              else 
              break ; 
          } 
 
         return   dp [ i ] [ k ] = maxa ; 
         
      } 
      int   maxValueOfCoins ( vector < vector < int >> &  piles ,   int  k )   { 
         
 
          //try all 
      int  n = piles . size ( ) ; 
     
 
      for ( int  i = 0 ; i < n ; i ++ ) 
      { 
          for ( int  j = 1 ; j < piles [ i ] . size ( ) ; j ++ ) 
          { 
             piles [ i ] [ j ] += piles [ i ] [ j - 1 ] ; 
          } 
      } 
 
     vector < vector < int >>   dp ( n , vector < int >   ( k + 1 , - 1 ) ) ; 
          return   solve ( 0 , k , piles , dp ) ; 
         
      } 
 } ;