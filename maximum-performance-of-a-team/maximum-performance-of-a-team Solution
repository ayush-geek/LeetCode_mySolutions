class   Solution   { 
 public : 
      int   maxPerformance ( int  n ,  vector < int > &  speed ,  vector < int > &  efficiency ,   int  k )   { 
         
         vector < pair < int , int >>  vp ; 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             vp . push_back ( { efficiency [ i ] , speed [ i ] } ) ; 
          } 
          sort ( vp . begin ( ) , vp . end ( ) ) ; 
          reverse ( vp . begin ( ) , vp . end ( ) ) ; 
 
         priority_queue < long   long >  pq ; 
          long   long  sm = 0 ; 
          long   long  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          {    
             sm += vp [ i ] . second * 1ll ; 
             pq . push ( - 1 * vp [ i ] . second * 1ll ) ; 
 
              if ( pq . size ( ) > k ) 
              {    
                 sm -= abs ( pq . top ( ) ) ; 
                  pq . pop ( ) ; 
              } 
                
 
           
                 ans = max ( ans , 1ll * sm * vp [ i ] . first ) ; 
          } 
 
          return  ans % ( 1000000007 ) ; 
      } 
 } ;