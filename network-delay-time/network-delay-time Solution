class   Solution   { 
 public : 
      int   networkDelayTime ( vector < vector < int >> &  times ,   int  n ,   int  k )   { 
         
         vector < pair < int , int >>  adj [ n + 1 ] ; 
 
          for ( auto &  ele :  times ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( { ele [ 1 ] , ele [ 2 ] } ) ; 
          } 
 
         vector < int >   dis ( n + 1 , 1e9 ) ; 
          //dijkstra 
         priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >> >  pq ; 
         pq . push ( { 0 , k } ) ; 
         dis [ k ] = 0 ; 
          while ( ! pq . empty ( ) ) 
          { 
              auto  nd = pq . top ( ) ; 
             pq . pop ( ) ; 
              int  node = nd . second ; 
              int  d = nd . first ; 
              for ( auto & ele :  adj [ node ] ) 
              { 
                  int  e = ele . first ; 
                  int  w = ele . second ; 
 
                  if ( dis [ e ] > d + w ) 
                  { 
                     pq . push ( { d + w , e } ) ; 
                     dis [ e ] = d + w ; 
                  } 
              } 
          } 
          int  mx = - 1 ; 
          for ( int  i = 1 ; i <= n ; i ++ ) 
          { 
             mx = max ( mx , dis [ i ] ) ; 
          } 
 
          if ( mx == 1e9 ) 
              return   - 1 ; 
          return  mx ; 
      } 
 } ;