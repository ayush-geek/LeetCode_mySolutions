class   Solution   { 
 public : 
 
      void   dfs ( int  i , int  j , vector < vector < int >> &  grid , vector < vector < int >> &  vis ) 
      { 
 
            int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          if ( i < 0   ||  j < 0   ||  i >= n  ||  j >= m  ||  grid [ i ] [ j ] == 0   ||  vis [ i ] [ j ] ) 
              return   ; 
         
         vis [ i ] [ j ] = 1 ; 
          dfs ( i - 1 , j , grid , vis ) ; 
          dfs ( i + 1 , j , grid , vis ) ; 
 
          dfs ( i , j - 1 , grid , vis ) ; 
          dfs ( i , j + 1 , grid , vis ) ; 
 
      } 
 
      int   shortestBridge ( vector < vector < int >> &  grid )   { 
         
 
          //dO dFS  
          //aND tHEN BFS 
          int  fg = 0 ; 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == 1 ) 
                      { 
                          dfs ( i , j , grid , vis ) ; 
                         fg = 1 ; 
                          break ; 
                      } 
              } 
              if ( fg == 1 ) 
                  break ; 
          } 
 
      int  ans = INT_MAX ; 
     queue < pair < pair < int , int > , int >>  q ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( vis [ i ] [ j ] ) 
                     q . push ( { { i , j } , 0 } ) ; 
              } 
          } 
 
          while ( ! q . empty ( ) ) 
          { 
              int  r = q . front ( ) . first . first ; 
              int  c = q . front ( ) . first . second ; 
              int  d = q . front ( ) . second ; 
 
             q . pop ( ) ; 
 
 
              int  dr [ ] = { - 1 , 0 , 1 , 0 } ; 
              int  dc [ ] = { 0 , - 1 , 0 , + 1 } ; 
 
 
              for ( int  i = 0 ; i < 4 ; i ++ ) 
              { 
                  int  nr = r + dr [ i ] ; 
                  int  nc = c + dc [ i ] ; 
 
 
                  if ( nr >= 0   &&  nr < n  &&  nc >= 0   &&  nc < m  &&   ! vis [ nr ] [ nc ] ) 
                  { 
                     q . push ( { { nr , nc } , d + 1 } ) ; 
                     vis [ nr ] [ nc ] = 1 ; 
 
 
                      if ( grid [ nr ] [ nc ] == 1 ) 
                         ans = min ( ans , d ) ; 
                  } 
              } 
 
          } 
 
          return  ans ; 
      } 
 } ;