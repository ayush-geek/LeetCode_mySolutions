class   Solution   { 
 public : 
      int   longestPalindromeSubseq ( string word1 ,  string word2 )   { 
     string s = word1 + word2 ; 
      int  n = s . size ( ) ; 
     vector < vector < int >>   dp ( n + 1 , vector < int > ( n + 1 , 0 ) ) ; 
      int  ans = 0 ; 
      for ( int  i = n - 1 ; i >= 0 ; i -- ) 
       { 
           for ( int  j = i ; j < n ; j ++ ) 
           { 
               if ( i == j ) 
                 dp [ i ] [ j ] = 1 ; 
              else   if ( s [ i ] == s [ j ] ) 
                  { 
                     
                   
                     dp [ i ] [ j ] = dp [ i + 1 ] [ j - 1 ] + 2 ; 
                      if ( i < word1 . size ( )   &&  j >= word1 . size ( ) ) 
                         ans = max ( ans , dp [ i ] [ j ] ) ; 
                  } 
              else 
              { 
                 dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i + 1 ] [ j ] ) ; 
              } 
 
           } 
       }    
     
          return  ans ; 
      } 
 
      int   longestPalindrome ( string word1 ,  string word2 )   { 
        
      
          return    longestPalindromeSubseq ( word1 , word2 ) ; 
      } 
 } ;