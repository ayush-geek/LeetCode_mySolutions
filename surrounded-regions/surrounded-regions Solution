class   Solution   { 
  public : 
 
      void   dfs ( int  i , int  j , vector < vector < char >> &  board , vector < vector < int >> &  vis ) 
      { 
                 int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
 
 
          if ( i < 0   ||  j < 0   ||  i >= n  ||  j >= m  ||  vis [ i ] [ j ] == 1   ||  board [ i ] [ j ] == 'X'   ) 
              return   ; 
         
         vis [ i ] [ j ] = 1 ; 
 
          dfs ( i , j + 1 , board , vis ) ; 
 
          dfs ( i , j - 1 , board , vis ) ; 
 
          dfs ( i - 1 , j , board , vis ) ; 
 
          dfs ( i + 1 , j , board , vis ) ; 
 
 
      } 
 
      void   solve ( vector < vector < char >> &  board )   { 
 
          //Any  O connected to bOunday  
          //dfs 
          //Not change 
 
 
          int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
 
         vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             if ( board [ i ] [ 0 ]   == 'O' ) { 
                 
                  dfs ( i , 0 , board , vis ) ;     
              } 
              if ( board [ i ] [ m - 1 ] == 'O' ) { 
              
                   dfs ( i , m - 1 , board , vis ) ;     
             
              } 
 
          }   
 
          for ( int  j = 0 ; j < m ; j ++ ) 
          { 
             if ( board [ 0 ] [ j ]   == 'O' ) 
                  dfs ( 0 , j , board , vis ) ;     
              if ( board [ n - 1 ] [ j ] == 'O' ) 
                  dfs ( n - 1 , j , board , vis ) ;     
 
          }    
 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( board [ i ] [ j ] == 'O'   &&   ! vis [ i ] [ j ] ) 
                     board [ i ] [ j ] = 'X' ; 
              } 
          } 
 
     
      // return board; 
      } 
  } ;