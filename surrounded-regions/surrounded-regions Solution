class   Solution   { 
  public : 
 
      void   dfs ( int  i , int  j , vector < vector < int >> &  vis , vector < vector < char >> &  board ) 
      { 
 
            int  n = board . size ( ) ; 
            int  m = board [ 0 ] . size ( ) ; 
          if ( i < 0   ||  i >= n  ||  j < 0   ||  j >= m  ||  board [ i ] [ j ] == 'X' ||  vis [ i ] [ j ]   ) 
              return   ; 
 
         vis [ i ] [ j ] = 1 ; 
 
          dfs ( i - 1 , j , vis , board ) ; 
          dfs ( i + 1 , j , vis , board ) ; 
          dfs ( i , j - 1 , vis , board ) ; 
          dfs ( i , j + 1 , vis , board ) ; 
      } 
 
      void   solve ( vector < vector < char >> &  board )   { 
         
          //flip all 0 which are not conncet to bounadary 
 
          //dfs 
 
              int  n = board . size ( ) ; 
              int  m = board [ 0 ] . size ( ) ; 
 
             vector < vector < int >>   vis ( n , vector < int >   ( m , 0 ) ) ; 
         
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( board [ 0 ] [ j ] == 'O' ) 
                     dfs ( 0 , j , vis , board ) ; 
                  if ( board [ n - 1 ] [ j ] == 'O' ) 
                      dfs ( n - 1 , j , vis , board ) ; 
              } 
 
              for ( int  i = 0 ; i < n ; i ++ ) 
              { 
                  if ( board [ i ] [ 0 ] == 'O' ) 
                      dfs ( i , 0 , vis , board ) ; 
                  if ( board [ i ] [ m - 1 ] == 'O' ) 
                      dfs ( i , m - 1 , vis , board ) ; 
              } 
 
 
              //Do dfs For all Present in Vis 
 
           
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( board [ i ] [ j ] == 'O'   &&   ! vis [ i ] [ j ] ) 
                     board [ i ] [ j ] = 'X' ; 
              } 
          } 
 
         
      } 
  } ;