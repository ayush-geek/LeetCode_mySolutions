class   Solution   { 
 
 private :  
      int  timer = 0 ; 
 
      void   dfs ( int  nd , int  par , vector < int >  adj [ ] , vector < int > &  vis , vector < int > &  tin , vector < int > &  lin ) 
      { 
         vis [ nd ] = 1 ; 
         tin [ nd ] = lin [ nd ] = timer ; 
         timer ++ ; 
 
 
          for ( auto  it :  adj [ nd ] ) 
          { 
              if ( it == par ) 
                  continue ; 
              else   if ( ! vis [ it ] ) 
              { 
                  dfs ( it , nd , adj , vis , tin , lin ) ; 
                  lin [ nd ] = min ( lin [ nd ] , lin [ it ] ) ; 
 
                   if ( lin [ it ] > tin [ nd ] ) 
                     bridges . push_back ( { it , nd } ) ; 
              } 
              else 
              { 
                 lin [ nd ] = min ( lin [ nd ] , lin [ it ] ) ; 
              } 
          } 
      } 
 
 
 public : 
      vector < vector < int >>  bridges ; 
 
     vector < vector < int >>   criticalConnections ( int  n ,  vector < vector < int >> &  connections )   { 
 
         vector < int >  adj [ n ] ; 
 
         for ( auto  it :  connections ) 
         { 
            adj [ it [ 0 ] ] . push_back ( it [ 1 ] ) ; 
            adj [ it [ 1 ] ] . push_back ( it [ 0 ] ) ; 
 
         } 
 
        vector < int >   vis ( n , 0 ) ; 
        vector < int >   tin ( n , 0 ) ; 
        vector < int >   lin ( n , 0 ) ; 
       
           dfs ( 0 , - 1 , adj , vis , tin , lin ) ; 
 
         return  bridges ; 
 
      } 
 } ;