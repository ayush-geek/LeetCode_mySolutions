class   Solution   { 
 public : 
     vector < vector < int >>  bg ; 
 
 private : 
      int  timer = 1 ; 
 
 private : 
 
 
      void   dfs ( int  i , int  par , vector < int > &  vis , vector < int >  adj [ ] , int  tin [ ] , int  low [ ] ) 
      { 
             vis [ i ] = 1 ; 
            
             low [ i ] = tin [ i ] = timer ; 
              timer ++ ; 
 
               for ( auto &  ele :  adj [ i ] ) 
               { 
                   if ( ele == par ) 
                   { 
                       continue ; 
                   } 
                   if ( ! vis [ ele ] ) 
                   {   
                       dfs ( ele , i , vis , adj , tin , low ) ; 
 
                       low [ i ] = min ( low [ i ] , low [ ele ] ) ; 
 
 
                        //i---ele 
                        if ( low [ ele ] > tin [ i ] ) 
                        { 
                         bg . push_back ( { ele , i } ) ; 
                        } 
                   } 
                   else 
                   { 
                      low [ i ] = min ( low [ i ] , low [ ele ] ) ; 
                   } 
               } 
      } 
 
 public : 
     vector < vector < int >>   criticalConnections ( int  n ,  vector < vector < int >> &  connections )   { 
         vector < int >  adj [ n ] ; 
          for ( auto &  ele :  connections ) 
              { 
                 adj [ ele [ 0 ] ] . push_back ( ele [ 1 ] ) ; 
                 adj [ ele [ 1 ] ] . push_back ( ele [ 0 ] ) ; 
 
              } 
     vector < int >   vis ( n , 0 ) ; 
          int  tin [ n ] ; 
          int  low [ n ] ; 
 
          dfs ( 0 , - 1 , vis , adj , tin , low ) ; 
          return  bg ; 
 } 
 } ;