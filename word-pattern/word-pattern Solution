class   Solution   { 
 public : 
      bool   wordPattern ( string pattern ,  string s )   { 
         
         unordered_map < char , string >  mp ; 
         unordered_map < string , char >  mp1 ; 
          int  k = 0 ; 
          int  j = 0 ; 
          for ( int  i = 0 ; i < s . size ( ) ; i ++ ) 
          { 
 
              if ( s [ i ] == ' '    ||  i == s . size ( ) - 1 ) 
              { 
                  if ( k >= pattern . length ( ) ) 
                      return   false ; 
                 string tmp = s . substr ( j , i - j ) ; 
                  if ( i == s . size ( ) - 1 ) 
                     tmp = s . substr ( j , i - j + 1 ) ; 
                
            
                  char  al = pattern [ k ] ; 
                  if ( mp . find ( al ) != mp . end ( ) ) 
                  {    
                      //cout<<mp[pattern[k]]<<" "<<tmp<<endl; 
                      if ( mp [ pattern [ k ] ] != tmp ) 
                          return   false ; 
                  } 
                  if ( mp1 . find ( tmp ) != mp1 . end ( ) ) 
                  { 
                       //cout<<mp1[tmp]<<" "<<pattern[k]<<endl; 
                      if ( mp1 [ tmp ] != pattern [ k ] ) 
                          return   false ; 
                  } 
 
                 // cout<<k<<" "<<tmp<<endl; 
                 mp [ pattern [ k ] ] = tmp ; 
                 mp1 [ tmp ] = pattern [ k ] ; 
                 
                 k ++ ; 
                 // cout<<j<<endl; 
                 j = i + 1 ; 
              } 
          } 
 
          if ( k != pattern . length ( ) ) 
              return   false ; 
          return   true ; 
      } 
 } ;