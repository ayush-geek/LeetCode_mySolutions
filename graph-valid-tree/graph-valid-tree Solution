class   Solution   { 
 public : 
 
      bool   dfs ( int  i , int  par , vector < int >  adj [ ] , vector < int > &  vis ) 
      { 
         vis [ i ] = 1 ; 
 
          for ( auto &  ele :  adj [ i ] ) 
          { 
              if ( ! vis [ ele ] ) { 
                  if ( dfs ( ele , i , adj , vis ) )   return   true ; } 
              else   if ( vis [ ele ]   &&  ele != par ) 
                  return   true ; 
          } 
          return   false ; 
      } 
 
      bool   validTree ( int  n ,  vector < vector < int >> &  edges )   { 
         
 
          //no loop 
          //disconnected 
         vector < int >   vis ( n , 0 ) ; 
         vector < int >  adj [ n ] ; 
 
          for (   auto &  ele :  edges ) 
          { 
             adj [ ele [ 0 ] ] . push_back ( ele [ 1 ] ) ; 
             adj [ ele [ 1 ] ] . push_back ( ele [ 0 ] ) ; 
          } 
 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              if ( ! vis [ i ] ) { 
                  if ( i != 0 ) 
                      return   false ; 
 
                  if ( dfs ( i , - 1 , adj , vis ) ) 
                      return   false ; 
                 
              } 
         
          } 
          return   true ; 
      } 
 } ;