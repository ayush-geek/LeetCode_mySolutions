/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 
 
  class   Solution   { 
  public : 
      int  pre_ind ; 
 
     TreeNode *   solve ( vector < int > &  preorder ,  vector < int > &  inorder , int  srt , int  end ) 
      { 
             
          if ( srt > end ) 
              return   NULL ; 
         
         TreeNode *  node = new   TreeNode ( preorder [ pre_ind ++ ] ) ; 
         
          if ( srt == end ) 
              return  node ; 
         
          int  in_ind = search ( inorder , srt , end , node -> val ) ; 
         
         node -> left = solve ( preorder , inorder , srt , in_ind - 1 ) ; 
         node -> right = solve ( preorder , inorder , in_ind + 1 , end ) ; 
         
          return  node ; 
         
         
         
         
      } 
     
     
      int   search ( vector < int > &  inorder , int  srt , int  end , int  val ) 
      { 
          for ( int  i = srt ; i <= end ; i ++ ) 
          { 
              if ( inorder [ i ] == val ) 
                  return  i ; 
          } 
         
          return   - 1 ; 
      } 
     
     
     
     
     
     
     TreeNode *   buildTree ( vector < int > &  preorder ,  vector < int > &  inorder )   {   
         pre_ind = 0 ; 
          return   solve ( preorder , inorder , 0 , preorder . size ( ) - 1 ) ; 
      } 
  } ;