
   class   DSU 
  { 
  private :  
     vector < int >  rank ,  parent ,  size ; 
   
  public : 
      DSU ( int  n ) 
      { 
         rank . resize ( n + 1 , 0 ) ; 
         parent . resize ( n + 1 ) ; 
         size . resize ( n + 1 , 1 ) ; 
 
          for ( int  i = 0 ; i <= n ; i ++ ) 
             parent [ i ] = i ; 
      } ; 
    
      int   findUPar ( int  u ) 
      { 
          if ( u == parent [ u ] ) 
              return  u ; 
 
          return  parent [ u ] = findUPar ( parent [ u ] ) ; 
      } 
 
      void   unionByRank ( int  u , int  v ) 
      { 
          int  ulp_u = findUPar ( u ) ; 
          int  ulp_v = findUPar ( v ) ; 
 
          if ( ulp_u == ulp_v )    
              return   ; 
 
          if ( rank [ ulp_u ] < rank [ ulp_v ] ) 
          { 
             parent [ ulp_u ] = ulp_v ; 
              //rank[ulp_v]++; 
             
          } 
          else    if ( rank [ ulp_u ] > rank [ ulp_v ] ) 
          { 
             parent [ ulp_v ] = ulp_u ; 
              // rank[ulp_u]++; 
          } 
          else { 
              parent [ ulp_u ] = ulp_v ; 
             rank [ ulp_v ] ++ ; 
          } 
 
      } 
 
 
       void   unionBySize ( int  u , int  v ) 
      { 
          int  ulp_u = findUPar ( u ) ; 
          int  ulp_v = findUPar ( v ) ; 
 
          if ( ulp_u == ulp_v )    
              return   ; 
 
          if ( size [ ulp_u ] <= size [ ulp_v ] ) 
          { 
             parent [ ulp_u ] = ulp_v ; 
             size [ ulp_v ] += size [ ulp_u ] ; 
             
          } 
          else 
          { 
             parent [ ulp_v ] = ulp_u ; 
             size [ ulp_u ] += size [ ulp_v ] ; 
          } 
 
      } 
 
 
  } ; 
 
  class   Solution   { 
  public : 
 
      int   makeConnected ( int  n ,  vector < vector < int >> &  connections )   { 
         
 
         DSU  ds ( n ) ; 
 
          if ( connections . size ( ) < n - 1 ) 
              return   - 1 ; 
          int  ans = 0 ; 
          for ( auto  it :  connections ) 
          { 
              int  u = it [ 0 ] ; 
              int  v = it [ 1 ] ; 
 
 
 
              if ( ds . findUPar ( u ) != ds . findUPar ( v ) ) 
              { 
                ans ++ ; 
                 ds . unionBySize ( u , v ) ; 
              } 
           
          } 
 
          int  left = n - 1 - ans ; 
          return  left >= 0 ? left : - 1 ; 
      } 
  } ;