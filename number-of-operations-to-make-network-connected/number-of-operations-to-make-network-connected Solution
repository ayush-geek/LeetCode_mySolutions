class   DSU 
 { 
        public : 
     vector < int >  size , parent ; 
 
   
      DSU ( int  n ) 
      { 
         parent . resize ( n + 1 ) ; 
         size . resize ( n + 1 , 1 ) ; 
          iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
      } 
    
 
      int   findUpar ( int  node ) 
      { 
          if ( node == parent [ node ] ) 
              return  node ; 
         
          return  parent [ node ] = findUpar ( parent [ node ] ) ; 
      } 
 
      void   unionBySize ( int  u , int  v ) 
      { 
          int  up = findUpar ( u ) ; 
          int  vp = findUpar ( v ) ; 
 
          if ( up == vp ) 
              return   ; 
 
          if ( size [ up ] < size [ vp ] ) 
          { 
             size [ up ] += size [ vp ] ; 
             parent [ up ] = vp ; 
          } 
          else 
          { 
              size [ vp ] += size [ up ] ; 
             parent [ vp ] = up ; 
          } 
      } 
 
 
 
 } ; 
 
 class   Solution   { 
 public : 
      int   makeConnected ( int  n ,  vector < vector < int >> &  connections )   { 
             DSU  ds ( n ) ; 
              int  ct = 0 ; 
              for ( auto &  ele :  connections ) 
              { 
                  int  u = ele [ 0 ] ; 
                  int  v = ele [ 1 ] ; 
 
                  int  pu = ds . findUpar ( u ) ; 
                  int  pv = ds . findUpar ( v ) ; 
 
                  if ( pu != pv ) 
                      { 
                         ct ++ ; 
                         ds . unionBySize ( u , v ) ; 
                      } 
              } 
 
              int  req = n - 1 - ct ; 
 
              return   ( req + ct <= connections . size ( ) ) ? req : - 1 ; 
 
      } 
 } ;