class   DSU 
 { 
        public : 
     vector < int >  size , parent ; 
 
   
      DSU ( int  n ) 
      { 
         parent . resize ( n + 1 ) ; 
         size . resize ( n + 1 , 1 ) ; 
          iota ( parent . begin ( ) , parent . end ( ) , 0 ) ; 
      } 
    
 
      int   findUpar ( int  node ) 
      { 
          if ( node == parent [ node ] ) 
              return  node ; 
         
          return  parent [ node ] = findUpar ( parent [ node ] ) ; 
      } 
 
      bool   unionBySize ( int  u , int  v ) 
      { 
          int  up = findUpar ( u ) ; 
          int  vp = findUpar ( v ) ; 
 
          if ( up == vp ) 
              return   false ; 
 
          if ( size [ up ] < size [ vp ] ) 
          { 
             size [ up ] += size [ vp ] ; 
             parent [ up ] = vp ; 
          } 
          else 
          { 
              size [ vp ] += size [ up ] ; 
             parent [ vp ] = up ; 
          } 
          return   true ; 
      } 
 
 
 
 } ; 
 
 class   Solution   { 
 public : 
      int   makeConnected ( int  n ,  vector < vector < int >> &  connections )   { 
 
             DSU  ds ( n ) ; 
              int  ex = 0 ; 
              int  ct = 0 ; 
              for ( auto &  ele :  connections ) 
              { 
                  bool  z = ds . unionBySize ( ele [ 0 ] , ele [ 1 ] ) ; 
 
                  if ( z == false ) 
                     ex ++ ; 
                  else  
                     ct ++ ; 
              } 
 
             int  need = n - 1 - ct ; 
             
             if ( ex < need ) 
                  return   - 1 ; 
         
              return  need ; 
 
      } 
 } ;