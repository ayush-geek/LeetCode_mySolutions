class   Solution   { 
 public : 
      int   findMaximizedCapital ( int  k ,   int  w ,  vector < int > &  profits ,  vector < int > &  capital )   { 
         
     
         vector < pair < int , int >>  vp ; 
          int  n = profits . size ( ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             vp . push_back ( { capital [ i ] , profits [ i ] } ) ; 
          } 
          int  ans = w ; 
          sort ( vp . begin ( ) , vp . end ( ) ) ; 
 
         priority_queue < pair < int , int >>  pq ; 
          int  i = 0 ; 
          for (  i ; i < vp . size ( ) ; i ++ ) 
          { 
              if ( w < vp [ i ] . first ) 
                  break ; 
             pq . push ( { vp [ i ] . second , i } ) ; 
          } 
 
          while ( ! pq . empty ( )   &&  k > 0 ) 
          { 
 
              auto  nd = pq . top ( ) ; 
              int  cp = nd . first ; 
              int  ind = nd . second ; 
             pq . pop ( ) ; 
 
             ans += cp ; 
             w += vp [ ind ] . first ; 
             k -- ; 
 
             cout << ans << " " << w << endl ; 
              while ( i < n  &&   w <= vp [ i ] . first ) 
              { 
                  pq . push ( { vp [ i ] . second , i } ) ; 
                  i ++ ; 
              } 
 
 
 
          } 
 
          return  ans ; 
      } 
 } ;