class   Solution   { 
 public : 
 
 struct    cmp { 
 
      bool   operator ( ) ( pair < int , int > &  a , pair < int , int > &  b ) 
      { 
          if ( a . first < b . first ) 
              return  a > b ; 
          else  
          { 
              if ( a . first == b . first ) 
                  { 
                      if ( a . second < b . second ) 
                          return  a < b ; 
                  } 
             
          } 
          return  a < b ; 
      } 
 
 } ; 
 
      int   findMaximizedCapital ( int  k ,   int  w ,  vector < int > &  profits ,  vector < int > &  capital )   { 
         
 
         vector < pair < int , int >>  vp ; 
           for ( int  i = 0 ; i < profits . size ( ) ; i ++ ) 
          { 
             vp . push_back ( { capital [ i ] , profits [ i ] } ) ; 
          } 
         
          sort ( vp . begin ( ) , vp . end ( ) ) ; 
          //question is of priority queue 
 
 
 
 
 
      
          priority_queue < int >  pq ; 
          int  ans = 0 ; 
       
 
             
             
          // } 
          int  n = profits . size ( ) ; 
          int  z = 0 ; 
          int  l = 0 ; 
 
          // if(w<vp[0].first) 
          //     return w; 
          while ( k -- ) 
          { 
             
              // if(l>=n) 
              //     break; 
              for ( ; l <= n ; l ++ ) 
              {    
                  if ( l == n ) 
                      break ; 
                  if ( vp [ l ] . first <= w ) 
                     pq . push ( vp [ l ] . second ) ; 
                  else 
                  { 
                      // l==i; 
                      break ; 
                  } 
              } 
             if ( pq . empty ( ) ) 
              break ; 
 
         w += pq . top ( ) ; 
          pq . pop ( ) ;       
 
          
 
          } 
 
       
          return  w ; 
      } 
 } ;