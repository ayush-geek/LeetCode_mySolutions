class   Solution   { 
 public : 
 
      int   solve ( int  i , int  j , int  k , string &  s1 , string &  s2 , string &  s3
      , vector < vector < int >> &  dp ) 
      {    
         
              if ( i < 0   &&  j < 0   &&  k < 0 ) 
                  return   1 ; 
 
              if ( i < 0 ) 
              { 
                  if ( j >= 0 ) 
                  { 
                      if ( s2 . substr ( 0 , j + 1 ) == s3 . substr ( 0 , k + 1 ) ) 
                          return   1 ; 
                      else 
                          return   0 ; 
                  } 
                  else 
                      return   0 ; 
              } 
 
              if ( j < 0 ) 
              { 
                  if ( i >= 0 ) 
                  { 
                      if ( s1 . substr ( 0 , i + 1 ) == s3 . substr ( 0 , k + 1 ) ) 
                          return   1 ; 
                      else 
                          return   0 ; 
                  } 
                  else 
                      return   0 ; 
              } 
 
        
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
 
          int  ans = 0 ; 
          if ( s1 [ i ] == s3 [ k ]   &&  s2 [ j ] == s3 [ k ] ) 
          { 
             ans = solve ( i - 1 , j , k - 1 , s1 , s2 , s3 , dp )   ||   solve ( i , j - 1 , k - 1 , s1 , s2 , s3 , dp ) ; 
          } 
          else   if ( s1 [ i ] == s3 [ k ]   ) 
          { 
             ans = solve ( i - 1 , j , k - 1 , s1 , s2 , s3 , dp ) ; 
 
          } 
          else   if ( s2 [ j ] == s3 [ k ] ) 
          { 
             ans = solve ( i , j - 1 , k - 1 , s1 , s2 , s3 , dp ) ; 
          } 
          else 
             ans = 0 ; 
         
          return  dp [ i ] [ j ] = ans ; 
      } 
 
      bool   isInterleave ( string s1 ,  string s2 ,  string s3 )   { 
         
 
          int  n = s1 . size ( ) ; 
          int  m = s2 . size ( ) ; 
          int  k = s3 . size ( ) ; 
 
          if ( n + m != k ) 
              return   false ; 
 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( m + 1 , - 1 ) ) ; 
          return    solve ( n - 1 , m - 1 , k - 1 , s1 , s2 , s3 , dp ) ; 
      } 
 } ;