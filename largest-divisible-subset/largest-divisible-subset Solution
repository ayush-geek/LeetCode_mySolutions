class   Solution   { 
 public : 
     vector < int >   largestDivisibleSubset ( vector < int > &  nums )   { 
          sort ( nums . begin ( ) , nums . end ( ) ) ; 
          int  n = nums . size ( ) ; 
 
          vector < int >   dp ( n , 1 ) ; 
         vector < int >   hash ( n , 0 ) ; 
          iota ( hash . begin ( ) , hash . end ( ) , 0 ) ;   //Set hash[i]=i; 
          int  lst = 0 ; 
          int  mx = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < i ; j ++ ) 
              { 
                  if ( nums [ i ] % nums [ j ] == 0   &&   1 + dp [ j ] > dp [ i ] ) 
                      { 
                         dp [ i ] = 1 + dp [ j ] ; 
                         hash [ i ] = j ; 
                      } 
                  if ( dp [ i ] > mx ) 
                  { 
                     mx = dp [ i ] ; 
                     lst = i ; 
                  } 
              } 
          } 
         
         vector < int >  res ; 
         
          while ( 1 ) 
          { 
             res . push_back ( nums [ lst ] ) ; 
                 if ( hash [ lst ] == lst ) 
                  break ; 
             lst = hash [ lst ] ; 
             
          
          } 
         
          reverse ( res . begin ( ) , res . end ( ) ) ; 
          return  res ; 
      } 
 } ;