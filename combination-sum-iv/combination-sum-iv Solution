class   Solution   { 
  public : 
     
     
      int   solve ( int  i , int  target , vector < int > &  nums , vector < vector < int >> &  dp ) 
      { 
         
         
          //Base Case 
          if ( target == 0 ) 
              return   1 ; 
         
         
          if ( i < 0   ||  target < 0 ) 
          { 
              return   0 ; 
          } 
         
         
         
         
         
          if ( dp [ i ] [ target ] != - 1 ) 
              return  dp [ i ] [ target ] ; 
         
         
          int  take = 0 ; 
         
          if ( nums [ i ] <= target ) 
          { 
             take = solve ( nums . size ( ) - 1 , target - nums [ i ] , nums , dp ) ; 
          } 
         
          int  not_take = solve ( i - 1 , target , nums , dp ) ; 
         
         
         
          return  dp [ i ] [ target ] = take + not_take ; 
      } 
     
     
     
     
     
     
     
     
     
     
     
      int   combinationSum4 ( vector < int > &  nums ,   int  target )   { 
          int  n = nums . size ( ) ; 
         
          // sort(nums.begin(),nums.end()); 
         vector < vector < int >>   dp ( n + 1 , vector < int >   ( target + 1 , - 1 ) ) ; 
         
         
          return   solve ( n - 1 , target , nums , dp ) ; 
      } 
  } ;