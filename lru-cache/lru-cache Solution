//new //used Recently at end  ,old enteries at front 
 //whenever a key reappears put it back 
 //That's all 
 class   LRUCache   { 
 private : 
 int  size ; 
 list < int >  dll ; 
 
 //to delete node faster and retreive value 
 unordered_map < int , pair < list < int > :: iterator , int >>  mp ; 
 
 public : 
      LRUCache ( int  capacity )   { 
         size = capacity ;         
      } 
     
      int   get ( int  key )   { 
          //if not present 
          if ( mp . count ( key ) == 0 ) 
              return   - 1 ; 
          // else put it in back 
          int  v = mp [ key ] . second ; 
          auto  itr = mp [ key ] . first ; 
         dll . erase ( itr ) ; 
         dll . push_back ( key ) ; 
         mp [ key ] . first = -- dll . end ( ) ; 
          return  v ;  
      } 
     
      void   put ( int  key ,   int  value )   { 
         
          //if key present 
          if ( mp . count ( key ) ) 
          { 
             mp [ key ] . second = value ; 
              auto  itr = mp [ key ] . first ; 
             dll . erase ( itr ) ; 
             dll . push_back ( key ) ; 
             mp [ key ] . first = -- dll . end ( ) ; 
          } 
          else 
          { 
             dll . push_back ( key ) ; 
             mp [ key ] = { -- dll . end ( ) , value } ; 
 
              //chk size if more remove  
              //old element from front 
              if ( mp . size ( ) > size ) 
              { 
                  auto  frnt = dll . begin ( ) ; 
                 mp . erase ( * frnt ) ; 
                 dll . erase ( frnt ) ; 
              } 
          } 
 
      } 
 } ; 
 
 /**
  * Your LRUCache object will be instantiated and called as such:
  * LRUCache* obj = new LRUCache(capacity);
  * int param_1 = obj->get(key);
  * obj->put(key,value);
  */