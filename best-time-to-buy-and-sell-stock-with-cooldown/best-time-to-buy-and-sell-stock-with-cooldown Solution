class   Solution   { 
 public : 
      int   solve ( int  i , int  j , vector < int > &  prices , vector < vector < int >> &  dp ) 
      { 
 
          if ( i >= prices . size ( ) ) 
              return   0 ; 
 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          if ( j == 0 ) 
              return  dp [ i ] [ j ] = max ( 
                  - prices [ i ] + solve ( i + 1 , 1 , prices , dp )   , 
                  solve ( i + 1 , 0 , prices , dp ) 
             
              ) ; 
        
               return  dp [ i ] [ j ] = max ( 
                 prices [ i ] + solve ( i + 2 , 0 , prices , dp )   , 
                  solve ( i + 1 , 1 , prices , dp ) 
             
              ) ; 
         
      } 
 
      int   maxProfit ( vector < int > &  prices )   { 
          //2 states 
          int  n = prices . size ( ) ; 
         vector < vector < int >>   dp ( n + 2 , vector < int >   ( 2 , 0 ) ) ; 
 
          for ( int  i = n - 1 ; i >= 0 ; i -- ) 
          { 
             dp [ i ] [ 0 ] = max ( - prices [ i ] + dp [ i + 1 ] [ 1 ] , dp [ i + 1 ] [ 0 ] ) ; 
             dp [ i ] [ 1 ] = max ( prices [ i ] + dp [ i + 2 ] [ 0 ] , dp [ i + 1 ] [ 1 ] ) ; 
          } 
 
          return  dp [ 0 ] [ 0 ] ; 
          // return solve(0,0,prices,dp); 
      } 
 } ;