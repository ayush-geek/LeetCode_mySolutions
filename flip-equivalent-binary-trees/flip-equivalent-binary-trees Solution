/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
  class   Solution   { 
  public : 
      void   solve ( TreeNode *  rt ,  vector < vector <  pair < int , int >   >> &  res ) 
      { 
          if ( rt == NULL ) 
              return   ; 
         
           queue < pair < TreeNode * , int >>  q ; 
         q . push ( { rt , NULL } ) ; 
   
       
          while ( ! q . empty ( ) ) 
          { 
              int  sz = q . size ( ) ;     
             vector < pair < int , int >>  ans ; 
              for ( int  i = 0 ; i < sz ; i ++ ) 
              { 
                  auto  nd = q . front ( ) ; 
                 ans . push_back ( { nd . first -> val , nd . second } ) ; 
                 TreeNode *  tmp = nd . first ; 
                 q . pop ( ) ; 
                 
                  if ( tmp -> left != NULL ) 
                     q . push ( { tmp -> left , tmp -> val } ) ; 
                  if ( tmp -> right != NULL ) 
                     q . push ( { tmp -> right , tmp -> val } ) ; 
              } 
 
             res . push_back ( ans ) ; 
          } 
          return   ; 
      } 
 
      bool   flipEquiv ( TreeNode *  root1 ,  TreeNode *  root2 )   { 
         
 
          //Just Chk Level Oder Traversal same or not 
        vector < vector <  pair < int , int >   >>  res1 ; 
        vector < vector <  pair < int , int >   >>  res2 ; 
 
          solve ( root1 , res1 ) ; 
            solve ( root2 , res2 ) ; 
         
          if ( res1 . size ( ) != res2 . size ( ) ) 
              return   false ; 
          int  n = res1 . size ( ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              sort ( res1 [ i ] . begin ( ) , res1 [ i ] . end ( ) ) ; 
              sort ( res2 [ i ] . begin ( ) , res2 [ i ] . end ( ) ) ; 
             
              if ( res1 [ i ] != res2 [ i ] ) 
                  return   false ; 
          } 
 
          return   true ; 
      } 
  } ;