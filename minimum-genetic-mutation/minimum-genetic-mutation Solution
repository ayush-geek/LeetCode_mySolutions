class   Solution   { 
 public : 
      int   minMutation ( string start ,  string end ,  vector < string > &  bank )   { 
         
         
          //graph 
          //traversal ALGO 
          //bfS 
         
         unordered_set < string >  dic ; 
         
          for ( int  i = 0 ; i < bank . size ( ) ; i ++ ) 
          { 
             dic . insert ( bank [ i ] ) ; 
          } 
         
         
          if ( dic . find ( end ) == dic . end ( ) ) 
              return   - 1 ; 
     
         vector < char >  avail  =   { 'A' ,   'C' ,   'G' ,   'T' } ; 
          unordered_set < string >  vis ; 
         
          int  ans = 0 ; 
         
         queue < string >  q ; 
         
         q . push ( start ) ; 
         vis . insert ( start ) ; 
         
          while ( ! q . empty ( ) ) 
          { 
             
              int  n = q . size ( ) ; 
             
              while ( n -- ) 
              { 
                 
                 string tmp = q . front ( ) ; 
                 q . pop ( ) ; 
                 
                 
                  if ( tmp == end ) 
                      return  ans ; 
                 
                  for ( int  i = 0 ; i < 8 ; i ++ ) 
                  {    
                      char  ori = tmp [ i ] ; 
                      for ( int  j = 0 ; j < 4 ; j ++ ) 
                      { 
                         
                         tmp [ i ] = avail [ j ] ; 
                         
                         
                          if ( dic . find ( tmp ) != dic . end ( ) ) 
                          { 
                              if ( vis . find ( tmp ) == vis . end ( ) ) 
                              { 
                                 q . push ( tmp ) ; 
                                 vis . insert ( tmp ) ; 
                              } 
                          } 
                      } 
                     tmp [ i ] = ori ; 
                  } 
                 
              } 
             ans ++ ; 
             
          } 
         
          return   - 1 ; 
         
         
         
      } 
 } ;